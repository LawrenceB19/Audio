
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>
#include "MixerManager.h"
#include "LFO.h"
#include "EG.h"
#include "AMP.h"
#include "FILTER.h"
#include "Encoder.h"
#include "SPI.h"
#include "RENDER.h"
#include "REVERB.h"
#include "effect_platervbstereo.h"

#include <Arduino.h>



MixerManager mixerManager;   // Instance of MixerManager
LFO lfo1;   // Instance of LFO 1
LFO lfo2;   // Instance of LFO 2
LFO lfo3;   // Instance of LFO 3
EG Envelope1;   // Instance of envelope 1
EG Envelope2;   // Instance of envelope 2
EG Envelope3;   // Instance of envelope 3
AMP amp;
FILTER filter;
RENDER render;
REVERB reverb;

Encoder Enc1(34, 33);
Encoder Enc2(36, 35);
Encoder Enc3(38, 37);
Encoder Enc4(40, 39);


DMAMEM uint16_t ib[320 * 240];
DMAMEM uint16_t fb[320 * 240];
//DMAMEM buffers for screen

// Define pin numbers
const int selectPins[4] = {29, 30, 31, 32};  // Selector pins connected to the multiplexer
const int readPin = 27;  // Analog read pin A10 on Teensy 4.1

// Create an array to store read values
int muxValues[16];

// GUItool: begin automatically generated code
AudioSynthWaveform       alg1_waveformB4; //xy=92.27272033691406,995.1887845993042
AudioSynthWaveform       alg1_waveformA4; //xy=93.54544830322266,961.188835144043
AudioSynthWaveform       alg1_waveformB3; //xy=94.72027969360352,854.7133121490479
AudioSynthWaveform       alg1_waveformA3; //xy=95.99300765991211,820.7133626937866
AudioSynthWaveform       alg1_waveformB5; //xy=95,1124.713363647461
AudioSynthWaveform       alg1_waveformB6; //xy=94.72027587890625,1261.2027463912964
AudioSynthWaveform       alg1_waveformB7; //xy=94.5804214477539,1395.5243425369263
AudioSynthWaveform       alg1_waveformD3; //xy=96.53845977783203,922.1818542480469
AudioSynthWaveform       alg1_waveformD5;  //xy=95.65035247802734,1192.9510803222656
AudioSynthWaveform       alg1_waveformA5; //xy=96.2727279663086,1090.7134141921997
AudioSynthWaveform       alg1_waveformD4; //xy=96.41958618164062,1058.3357238769531
AudioSynthWaveform       alg1_waveformA6; //xy=95.99300384521484,1227.2027969360352
AudioSynthWaveform       alg1_waveformC3; //xy=97.81118774414062,890.0000610351562
AudioSynthWaveform       alg1_waveformC5; //xy=96.92308044433594,1160.769287109375
AudioSynthWaveform       alg1_waveformD6; //xy=96.41958618164062,1326.0279846191406
AudioSynthWaveform       alg1_waveformB2; //xy=98.91608428955078,715.9580173492432
AudioSynthWaveform       alg1_waveformC4; //xy=97.69231414794922,1026.1539306640625
AudioSynthWaveform       alg1_waveformD7; //xy=96.41958618164062,1459.1048889160156
AudioSynthWaveform       alg1_waveformA7; //xy=97.39160537719727,1359.2166604995728
AudioSynthWaveform       alg1_waveformC6; //xy=97.69231414794922,1293.84619140625
AudioSynthWaveform       alg1_waveformA2; //xy=100.18881225585938,681.9580678939819
AudioSynthWaveform       alg1_waveformD1; //xy=100.54544830322266,639.4544982910156
AudioSynthWaveform       alg1_waveformD2; //xy=100.26573944091797,780.6433410644531
AudioSynthWaveform       alg1_waveformC7; //xy=97.69231414794922,1426.923095703125
AudioSynthWaveform       alg1_waveformA8; //xy=97.81118774414062,1500.2796173095703
AudioSynthWaveform       alg1_waveformB1; //xy=101.81819152832031,573.6363658905029
AudioSynthWaveform       alg1_waveformC1; //xy=101.81817626953125,607.272705078125
AudioSynthWaveform       alg1_waveformC2; //xy=101.53846740722656,748.4615478515625
AudioSynthWaveform       alg1_waveformA1;      //xy=103.0909194946289,541.4545726776123
AudioSynthWaveform       alg1_waveformB8; //xy=100.38461303710938,1534.2796349525452
AudioSynthWaveform       alg1_waveformD8; //xy=100.38461875915527,1599.8741760253906
AudioSynthWaveform       alg1_waveformC8; //xy=101.65734672546387,1567.6923828125
AudioMixer4              alg1_mix2; //xy=528.4848365783691,692.4242506027222
AudioMixer4              alg1_mix1;         //xy=530.3030090332031,617.8788900375366
AudioMixer4              alg1_mix4; //xy=530.3030166625977,842.4242305755615
AudioMixer4              alg1_mix3;  //xy=531.2121086120605,767.3333730697632
AudioMixer4              alg1_mix7; //xy=530.3030128479004,1066.605969429016
AudioMixer4              alg1_mix6; //xy=531.2121047973633,991.5151119232178
AudioMixer4              alg1_mix5; //xy=533.0302886962891,917.3333530426025
AudioMixer4              alg1_mix8; //xy=533.0302848815918,1141.5150918960571

AudioEffectWaveshaper softclip1;
AudioEffectWaveshaper softclip2;
AudioEffectWaveshaper softclip3;
AudioEffectWaveshaper softclip4;
AudioEffectWaveshaper softclip5;
AudioEffectWaveshaper softclip6;
AudioEffectWaveshaper softclip7;
AudioEffectWaveshaper softclip8;

AudioAmplifier shaperAmp1;
AudioAmplifier shaperAmp2;
AudioAmplifier shaperAmp3;
AudioAmplifier shaperAmp4;
AudioAmplifier shaperAmp5;
AudioAmplifier shaperAmp6;
AudioAmplifier shaperAmp7;
AudioAmplifier shaperAmp8;


AudioAnalyzeRMS          rmsC1; //xy=904.5000057220459,2520.5000233650208
AudioAnalyzeRMS          rmsC2; //xy=909.5000057220459,2556.5000233650208
AudioAnalyzeRMS          rmsC3; //xy=910.5000057220459,2592.5000233650208
AudioAnalyzeRMS          rmsC4;  //xy=911.5000057220459,2634.5000233650208
AudioAnalyzeRMS          rmsC5; //xy=916.5000057220459,2670.5000233650208
AudioAnalyzeRMS          rmsC6; //xy=917.5000057220459,2706.5000233650208
AudioAnalyzeRMS          rmsC7; //xy=920.5000057220459,2742.5000233650208
AudioAnalyzeRMS          rmsC8; //xy=921.5000057220459,2778.5000233650208
AudioOutputI2S           i2s1;           //xy=3128.666816711426,754.333384513855

AudioConnection          patchCord1(alg1_waveformB4, 0, alg1_mix4, 1);
AudioConnection          patchCord2(alg1_waveformA4, 0, alg1_mix4, 0);
AudioConnection          patchCord3(alg1_waveformB3, 0, alg1_mix3, 1);
AudioConnection          patchCord4(alg1_waveformA3, 0, alg1_mix3, 0);
AudioConnection          patchCord5(alg1_waveformB5, 0, alg1_mix5, 1);
AudioConnection          patchCord6(alg1_waveformB6, 0, alg1_mix6, 1);
AudioConnection          patchCord7(alg1_waveformB7, 0, alg1_mix7, 1);
AudioConnection          patchCord8(alg1_waveformD3, 0, alg1_mix3, 3);
AudioConnection          patchCord9(alg1_waveformD5, 0, alg1_mix5, 3);
AudioConnection          patchCord10(alg1_waveformA5, 0, alg1_mix5, 0);
AudioConnection          patchCord11(alg1_waveformD4, 0, alg1_mix4, 3);
AudioConnection          patchCord12(alg1_waveformA6, 0, alg1_mix6, 0);
AudioConnection          patchCord13(alg1_waveformC3, 0, alg1_mix3, 2);
AudioConnection          patchCord14(alg1_waveformC5, 0, alg1_mix5, 2);
AudioConnection          patchCord15(alg1_waveformD6, 0, alg1_mix6, 3);
AudioConnection          patchCord16(alg1_waveformB2, 0, alg1_mix2, 1);
AudioConnection          patchCord17(alg1_waveformC4, 0, alg1_mix4, 2);
AudioConnection          patchCord18(alg1_waveformD7, 0, alg1_mix7, 3);
AudioConnection          patchCord19(alg1_waveformA7, 0, alg1_mix7, 0);
AudioConnection          patchCord20(alg1_waveformC6, 0, alg1_mix6, 2);
AudioConnection          patchCord21(alg1_waveformA2, 0, alg1_mix2, 0);
AudioConnection          patchCord22(alg1_waveformD1, 0, alg1_mix1, 3);
AudioConnection          patchCord23(alg1_waveformD2, 0, alg1_mix2, 3);
AudioConnection          patchCord24(alg1_waveformC7, 0, alg1_mix7, 2);
AudioConnection          patchCord25(alg1_waveformA8, 0, alg1_mix8, 0);
AudioConnection          patchCord26(alg1_waveformB1, 0, alg1_mix1, 1);
AudioConnection          patchCord27(alg1_waveformC1, 0, alg1_mix1, 2);
AudioConnection          patchCord28(alg1_waveformC2, 0, alg1_mix2, 2);
AudioConnection          patchCord29(alg1_waveformA1, 0, alg1_mix1, 0);
AudioConnection          patchCord30(alg1_waveformB8, 0, alg1_mix8, 1);
AudioConnection          patchCord31(alg1_waveformD8, 0, alg1_mix8, 3);
AudioConnection          patchCord32(alg1_waveformC8, 0, alg1_mix8, 2);

















AudioControlSGTL5000     sgtl5000_1;     //xy=244.5,458
// GUItool: end automatically generated code




// GUItool: end automatically generated code
const float noteFreqs[128] = {8.176, 8.662, 9.177, 9.723, 10.301, 10.913, 11.562, 12.25, 12.978, 13.75, 14.568, 15.434, 16.352, 17.324, 18.354, 19.445, 20.602, 21.827, 23.125, 24.5, 25.957, 27.5, 29.135, 30.868, 32.703, 34.648, 36.708, 38.891, 41.203, 43.654, 46.249, 48.999, 51.913, 55, 58.27, 61.735, 65.406, 69.296, 73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, 110, 116.541, 123.471, 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942, 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164, 493.883, 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880, 932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508, 1318.51, 1396.913, 1479.978, 1567.982, 1661.219, 1760, 1864.655, 1975.533, 2093.005, 2217.461, 2349.318, 2489.016, 2637.02, 2793.826, 2959.955, 3135.963, 3322.438, 3520, 3729.31, 3951.066, 4186.009, 4434.922, 4698.636, 4978.032, 5274.041, 5587.652, 5919.911, 6271.927, 6644.875, 7040, 7458.62, 7902.133, 8372.018, 8869.844, 9397.273, 9956.063, 10548.08, 11175.3, 11839.82, 12543.85};
//midi note frequencies
AudioSynthWaveform *Osc1_alg1_waveformA[ ] = {&alg1_waveformA1, &alg1_waveformA2, &alg1_waveformA3, &alg1_waveformA4, &alg1_waveformA5, &alg1_waveformA6, &alg1_waveformA7, &alg1_waveformA8};
AudioSynthWaveform *Osc1_alg1_waveformB[ ] = {&alg1_waveformB1, &alg1_waveformB2, &alg1_waveformB3, &alg1_waveformB4, &alg1_waveformB5, &alg1_waveformB6, &alg1_waveformB7, &alg1_waveformB8};
AudioSynthWaveform *Osc1_alg1_waveformC[ ] = {&alg1_waveformC1, &alg1_waveformC2, &alg1_waveformC3, &alg1_waveformC4, &alg1_waveformC5, &alg1_waveformC6, &alg1_waveformC7, &alg1_waveformC8};
AudioSynthWaveform *Osc1_alg1_waveformD[ ] = {&alg1_waveformD1, &alg1_waveformD2, &alg1_waveformD3, &alg1_waveformD4, &alg1_waveformD5, &alg1_waveformD6, &alg1_waveformD7, &alg1_waveformD8};

AudioMixer4 *Osc1_alg1_mix[ ] = {&alg1_mix1, &alg1_mix2, &alg1_mix3, &alg1_mix4, &alg1_mix5, &alg1_mix6, &alg1_mix7, &alg1_mix8};
//define waveforms and mixers as pointer array for algorithm 1
AudioEffectWaveshaper *softclip[ ] = {&softclip1, &softclip2, &softclip3, &softclip4, &softclip5, &softclip6, &softclip7, &softclip8};
AudioAmplifier *shaperAmp[ ] = {&shaperAmp1,&shaperAmp2,&shaperAmp3,&shaperAmp4,&shaperAmp5,&shaperAmp6,&shaperAmp7,&shaperAmp8};

float softclip_array_tanh[513]={-0.761594156,-0.759948744,-0.758293535,-0.756628491,-0.754953575,-0.753268751,-0.751573983,-0.749869235,-0.74815447,-0.746429654,-0.744694749,-0.742949722,-0.741194537,-0.739429159,-0.737653552,-0.735867684,-0.73407152,-0.732265024,-0.730448165,-0.728620908,-0.72678322,-0.724935068,-0.723076419,-0.721207241,-0.719327501,-0.717437168,-0.71553621,-0.713624596,-0.711702294,-0.709769274,-0.707825506,-0.705870959,-0.703905604,-0.701929411,-0.699942351,-0.697944396,-0.695935517,-0.693915686,-0.691884875,-0.689843057,-0.687790205,-0.685726293,-0.683651295,-0.681565184,-0.679467935,-0.677359524,-0.675239927,-0.673109118,-0.670967074,-0.668813773,-0.666649191,-0.664473306,-0.662286096,-0.66008754,-0.657877617,-0.655656306,-0.653423588,-0.651179443,-0.648923853,-0.646656798,-0.644378261,-0.642088225,-0.639786672,-0.637473586,-0.635148952,-0.632812755,-0.630464979,-0.62810561,-0.625734636,-0.623352042,-0.620957817,-0.618551949,-0.616134427,-0.61370524,-0.611264378,-0.608811832,-0.606347593,-0.603871653,-0.601384004,-0.598884641,-0.596373555,-0.593850744,-0.5913162,-0.588769921,-0.586211902,-0.583642142,-0.581060637,-0.578467387,-0.575862391,-0.573245649,-0.570617162,-0.567976931,-0.565324958,-0.562661247,-0.559985801,-0.557298624,-0.554599722,-0.551889102,-0.549166768,-0.54643273,-0.543686996,-0.540929574,-0.538160474,-0.535379708,-0.532587286,-0.529783222,-0.526967527,-0.524140217,-0.521301305,-0.518450808,-0.515588743,-0.512715125,-0.509829974,-0.506933308,-0.504025148,-0.501105513,-0.498174426,-0.495231909,-0.492277986,-0.48931268,-0.486336017,-0.483348023,-0.480348724,-0.477338149,-0.474316325,-0.471283283,-0.468239054,-0.465183668,-0.462117157,-0.459039556,-0.455950898,-0.452851218,-0.449740552,-0.446618938,-0.443486413,-0.440343015,-0.437188785,-0.434023763,-0.430847992,-0.427661512,-0.424464368,-0.421256605,-0.418038268,-0.414809402,-0.411570056,-0.408320277,-0.405060115,-0.40178962,-0.398508842,-0.395217835,-0.39191665,-0.388605342,-0.385283966,-0.381952578,-0.378611234,-0.375259991,-0.37189891,-0.368528049,-0.365147469,-0.361757231,-0.358357398,-0.354948034,-0.351529202,-0.348100968,-0.344663398,-0.34121656,-0.337760521,-0.33429535,-0.330821117,-0.327337894,-0.323845752,-0.320344763,-0.316835001,-0.313316541,-0.309789458,-0.306253828,-0.302709729,-0.299157239,-0.295596436,-0.2920274,-0.288450213,-0.284864955,-0.28127171,-0.27767056,-0.274061589,-0.270444883,-0.266820527,-0.263188609,-0.259549215,-0.255902434,-0.252248354,-0.248587067,-0.244918662,-0.241243232,-0.237560867,-0.233871663,-0.230175711,-0.226473107,-0.222763947,-0.219048325,-0.21532634,-0.211598088,-0.207863667,-0.204123178,-0.200376719,-0.19662439,-0.192866293,-0.189102528,-0.1853332,-0.18155841,-0.177778262,-0.173992859,-0.170202308,-0.166406714,-0.162606181,-0.158800818,-0.15499073,-0.151176027,-0.147356815,-0.143533204,-0.139705303,-0.135873222,-0.13203707,-0.12819696,-0.124353002,-0.120505307,-0.116653989,-0.112799159,-0.10894093,-0.105079416,-0.101214731,-0.097346989,-0.093476304,-0.089602791,-0.085726566,-0.081847744,-0.077966441,-0.074082774,-0.070196857,-0.066308809,-0.062418747,-0.058526787,-0.054633047,-0.050737645,-0.046840698,-0.042942325,-0.039042644,-0.035141773,-0.031239831,-0.027336937,-0.023433209,-0.019528767,-0.015623729,-0.011718214,-0.007812341,-0.00390623,0,0.00390623,0.007812341,0.011718214,0.015623729,0.019528767,0.023433209,0.027336937,0.031239831,0.035141773,0.039042644,0.042942325,0.046840698,0.050737645,0.054633047,0.058526787,0.062418747,0.066308809,0.070196857,0.074082774,0.077966441,0.081847744,0.085726566,0.089602791,0.093476304,0.097346989,0.101214731,0.105079416,0.10894093,0.112799159,0.116653989,0.120505307,0.124353002,0.12819696,0.13203707,0.135873222,0.139705303,0.143533204,0.147356815,0.151176027,0.15499073,0.158800818,0.162606181,0.166406714,0.170202308,0.173992859,0.177778262,0.18155841,0.1853332,0.189102528,0.192866293,0.19662439,0.200376719,0.204123178,0.207863667,0.211598088,0.21532634,0.219048325,0.222763947,0.226473107,0.230175711,0.233871663,0.237560867,0.241243232,0.244918662,0.248587067,0.252248354,0.255902434,0.259549215,0.263188609,0.266820527,0.270444883,0.274061589,0.27767056,0.28127171,0.284864955,0.288450213,0.2920274,0.295596436,0.299157239,0.302709729,0.306253828,0.309789458,0.313316541,0.316835001,0.320344763,0.323845752,0.327337894,0.330821117,0.33429535,0.337760521,0.34121656,0.344663398,0.348100968,0.351529202,0.354948034,0.358357398,0.361757231,0.365147469,0.368528049,0.37189891,0.375259991,0.378611234,0.381952578,0.385283966,0.388605342,0.39191665,0.395217835,0.398508842,0.40178962,0.405060115,0.408320277,0.411570056,0.414809402,0.418038268,0.421256605,0.424464368,0.427661512,0.430847992,0.434023763,0.437188785,0.440343015,0.443486413,0.446618938,0.449740552,0.452851218,0.455950898,0.459039556,0.462117157,0.465183668,0.468239054,0.471283283,0.474316325,0.477338149,0.480348724,0.483348023,0.486336017,0.48931268,0.492277986,0.495231909,0.498174426,0.501105513,0.504025148,0.506933308,0.509829974,0.512715125,0.515588743,0.518450808,0.521301305,0.524140217,0.526967527,0.529783222,0.532587286,0.535379708,0.538160474,0.540929574,0.543686996,0.54643273,0.549166768,0.551889102,0.554599722,0.557298624,0.559985801,0.562661247,0.565324958,0.567976931,0.570617162,0.573245649,0.575862391,0.578467387,0.581060637,0.583642142,0.586211902,0.588769921,0.5913162,0.593850744,0.596373555,0.598884641,0.601384004,0.603871653,0.606347593,0.608811832,0.611264378,0.61370524,0.616134427,0.618551949,0.620957817,0.623352042,0.625734636,0.62810561,0.630464979,0.632812755,0.635148952,0.637473586,0.639786672,0.642088225,0.644378261,0.646656798,0.648923853,0.651179443,0.653423588,0.655656306,0.657877617,0.66008754,0.662286096,0.664473306,0.666649191,0.668813773,0.670967074,0.673109118,0.675239927,0.677359524,0.679467935,0.681565184,0.683651295,0.685726293,0.687790205,0.689843057,0.691884875,0.693915686,0.695935517,0.697944396,0.699942351,0.701929411,0.703905604,0.705870959,0.707825506,0.709769274,0.711702294,0.713624596,0.71553621,0.717437168,0.719327501,0.721207241,0.723076419,0.724935068,0.72678322,0.728620908,0.730448165,0.732265024,0.73407152,0.735867684,0.737653552,0.739429159,0.741194537,0.742949722,0.744694749,0.746429654,0.74815447,0.749869235,0.751573983,0.753268751,0.754953575,0.756628491,0.758293535,0.759948744,0.761594156};
float softclip_array_atan[513]={-0.704832765,-0.703834929,-0.702830822,-0.701820391,-0.700803579,-0.699780333,-0.698750595,-0.69771431,-0.69667142,-0.695621867,-0.694565594,-0.693502541,-0.692432649,-0.691355858,-0.690272107,-0.689181334,-0.688083478,-0.686978477,-0.685866266,-0.684746782,-0.68361996,-0.682485735,-0.681344041,-0.680194812,-0.67903798,-0.677873478,-0.676701236,-0.675521185,-0.674333255,-0.673137375,-0.671933474,-0.67072148,-0.669501319,-0.668272918,-0.667036201,-0.665791095,-0.664537523,-0.663275407,-0.662004671,-0.660725236,-0.659437023,-0.658139951,-0.656833941,-0.65551891,-0.654194776,-0.652861455,-0.651518864,-0.650166918,-0.648805531,-0.647434615,-0.646054085,-0.64466385,-0.643263823,-0.641853912,-0.640434027,-0.639004076,-0.637563966,-0.636113603,-0.634652893,-0.633181739,-0.631700046,-0.630207716,-0.628704651,-0.627190751,-0.625665916,-0.624130045,-0.622583036,-0.621024785,-0.619455189,-0.617874142,-0.616281538,-0.614677271,-0.613061232,-0.611433312,-0.609793401,-0.608141389,-0.606477164,-0.604800611,-0.603111619,-0.601410071,-0.599695851,-0.597968844,-0.59622893,-0.594475991,-0.592709906,-0.590930556,-0.589137818,-0.587331569,-0.585511686,-0.583678043,-0.581830514,-0.579968973,-0.578093292,-0.576203341,-0.574298993,-0.572380114,-0.570446575,-0.568498242,-0.566534982,-0.56455666,-0.562563142,-0.56055429,-0.558529968,-0.556490038,-0.554434361,-0.552362797,-0.550275205,-0.548171445,-0.546051375,-0.543914851,-0.54176173,-0.539591867,-0.537405118,-0.535201338,-0.532980378,-0.530742093,-0.528486336,-0.526212957,-0.523921809,-0.521612742,-0.519285607,-0.516940253,-0.514576531,-0.512194289,-0.509793378,-0.507373644,-0.504934938,-0.502477107,-0.5,-0.497503465,-0.494987349,-0.492451503,-0.489895773,-0.487320008,-0.484724058,-0.482107771,-0.479470997,-0.476813586,-0.474135388,-0.471436254,-0.468716037,-0.465974588,-0.463211761,-0.46042741,-0.457621391,-0.454793559,-0.451943773,-0.449071891,-0.446177774,-0.443261283,-0.440322281,-0.437360635,-0.43437621,-0.431368876,-0.428338503,-0.425284966,-0.422208138,-0.419107899,-0.415984129,-0.41283671,-0.409665529,-0.406470476,-0.403251441,-0.400008322,-0.396741016,-0.393449425,-0.390133458,-0.386793022,-0.383428033,-0.380038409,-0.376624073,-0.373184952,-0.369720978,-0.366232088,-0.362718224,-0.359179333,-0.355615369,-0.352026289,-0.348412058,-0.344772646,-0.341108028,-0.337418189,-0.333703116,-0.329962806,-0.326197262,-0.322406493,-0.318590517,-0.314749358,-0.310883049,-0.30699163,-0.303075149,-0.299133662,-0.295167235,-0.291175941,-0.287159862,-0.283119088,-0.279053721,-0.274963869,-0.270849651,-0.266711196,-0.262548641,-0.258362135,-0.254151835,-0.24991791,-0.245660537,-0.241379906,-0.237076214,-0.232749673,-0.228400502,-0.224028933,-0.219635208,-0.215219578,-0.210782309,-0.206323675,-0.201843961,-0.197343466,-0.192822496,-0.188281371,-0.183720421,-0.179139986,-0.17454042,-0.169922085,-0.165285356,-0.160630616,-0.155958261,-0.151268697,-0.146562341,-0.14183962,-0.13710097,-0.132346838,-0.127577682,-0.122793967,-0.11799617,-0.113184775,-0.108360277,-0.103523179,-0.098673991,-0.093813233,-0.088941432,-0.084059123,-0.079166848,-0.074265157,-0.069354604,-0.064435751,-0.059509167,-0.054575424,-0.049635101,-0.04468878,-0.039737049,-0.034780498,-0.029819724,-0.024855323,-0.019887896,-0.014918045,-0.009946375,-0.004973491,0,0.004973491,0.009946375,0.014918045,0.019887896,0.024855323,0.029819724,0.034780498,0.039737049,0.04468878,0.049635101,0.054575424,0.059509167,0.064435751,0.069354604,0.074265157,0.079166848,0.084059123,0.088941432,0.093813233,0.098673991,0.103523179,0.108360277,0.113184775,0.11799617,0.122793967,0.127577682,0.132346838,0.13710097,0.14183962,0.146562341,0.151268697,0.155958261,0.160630616,0.165285356,0.169922085,0.17454042,0.179139986,0.183720421,0.188281371,0.192822496,0.197343466,0.201843961,0.206323675,0.210782309,0.215219578,0.219635208,0.224028933,0.228400502,0.232749673,0.237076214,0.241379906,0.245660537,0.24991791,0.254151835,0.258362135,0.262548641,0.266711196,0.270849651,0.274963869,0.279053721,0.283119088,0.287159862,0.291175941,0.295167235,0.299133662,0.303075149,0.30699163,0.310883049,0.314749358,0.318590517,0.322406493,0.326197262,0.329962806,0.333703116,0.337418189,0.341108028,0.344772646,0.348412058,0.352026289,0.355615369,0.359179333,0.362718224,0.366232088,0.369720978,0.373184952,0.376624073,0.380038409,0.383428033,0.386793022,0.390133458,0.393449425,0.396741016,0.400008322,0.403251441,0.406470476,0.409665529,0.41283671,0.415984129,0.419107899,0.422208138,0.425284966,0.428338503,0.431368876,0.43437621,0.437360635,0.440322281,0.443261283,0.446177774,0.449071891,0.451943773,0.454793559,0.457621391,0.46042741,0.463211761,0.465974588,0.468716037,0.471436254,0.474135388,0.476813586,0.479470997,0.482107771,0.484724058,0.487320008,0.489895773,0.492451503,0.494987349,0.497503465,0.5,0.502477107,0.504934938,0.507373644,0.509793378,0.512194289,0.514576531,0.516940253,0.519285607,0.521612742,0.523921809,0.526212957,0.528486336,0.530742093,0.532980378,0.535201338,0.537405118,0.539591867,0.54176173,0.543914851,0.546051375,0.548171445,0.550275205,0.552362797,0.554434361,0.556490038,0.558529968,0.56055429,0.562563142,0.56455666,0.566534982,0.568498242,0.570446575,0.572380114,0.574298993,0.576203341,0.578093292,0.579968973,0.581830514,0.583678043,0.585511686,0.587331569,0.589137818,0.590930556,0.592709906,0.594475991,0.59622893,0.597968844,0.599695851,0.601410071,0.603111619,0.604800611,0.606477164,0.608141389,0.609793401,0.611433312,0.613061232,0.614677271,0.616281538,0.617874142,0.619455189,0.621024785,0.622583036,0.624130045,0.625665916,0.627190751,0.628704651,0.630207716,0.631700046,0.633181739,0.634652893,0.636113603,0.637563966,0.639004076,0.640434027,0.641853912,0.643263823,0.64466385,0.646054085,0.647434615,0.648805531,0.650166918,0.651518864,0.652861455,0.654194776,0.65551891,0.656833941,0.658139951,0.659437023,0.660725236,0.662004671,0.663275407,0.664537523,0.665791095,0.667036201,0.668272918,0.669501319,0.67072148,0.671933474,0.673137375,0.674333255,0.675521185,0.676701236,0.677873478,0.67903798,0.680194812,0.681344041,0.682485735,0.68361996,0.684746782,0.685866266,0.686978477,0.688083478,0.689181334,0.690272107,0.691355858,0.692432649,0.693502541,0.694565594,0.695621867,0.69667142,0.69771431,0.698750595,0.699780333,0.700803579,0.701820391,0.702830822,0.703834929,0.704832765};
float softclip_array_cubic[513]={-1,-0.999977142,-0.999908686,-0.999794811,-0.999635696,-0.999431521,-0.999182463,-0.998888701,-0.998550415,-0.998167783,-0.997740984,-0.997270197,-0.9967556,-0.996197373,-0.995595694,-0.994950742,-0.994262695,-0.993531734,-0.992758036,-0.99194178,-0.991083145,-0.99018231,-0.989239454,-0.988254756,-0.987228394,-0.986160547,-0.985051394,-0.983901113,-0.982709885,-0.981477886,-0.980205297,-0.978892297,-0.977539063,-0.976145774,-0.97471261,-0.97323975,-0.971727371,-0.970175654,-0.968584776,-0.966954917,-0.965286255,-0.963578969,-0.961833239,-0.960049242,-0.958227158,-0.956367165,-0.954469442,-0.952534169,-0.950561523,-0.948551685,-0.946504831,-0.944421142,-0.942300797,-0.940143973,-0.93795085,-0.935721606,-0.933456421,-0.931155473,-0.928818941,-0.926447004,-0.924039841,-0.92159763,-0.91912055,-0.916608781,-0.9140625,-0.911481887,-0.908867121,-0.90621838,-0.903535843,-0.900819689,-0.898070097,-0.895287246,-0.892471313,-0.88962248,-0.886740923,-0.883826822,-0.880880356,-0.877901703,-0.874891043,-0.871848553,-0.868774414,-0.865668803,-0.8625319,-0.859363884,-0.856164932,-0.852935225,-0.84967494,-0.846384257,-0.843063354,-0.839712411,-0.836331606,-0.832921118,-0.829481125,-0.826011807,-0.822513342,-0.818985909,-0.815429688,-0.811844856,-0.808231592,-0.804590076,-0.800920486,-0.797223002,-0.793497801,-0.789745063,-0.785964966,-0.782157689,-0.778323412,-0.774462312,-0.77057457,-0.766660362,-0.76271987,-0.75875327,-0.754760742,-0.750742465,-0.746698618,-0.742629379,-0.738534927,-0.734415442,-0.730271101,-0.726102084,-0.721908569,-0.717690736,-0.713448763,-0.709182829,-0.704893112,-0.700579792,-0.696243048,-0.691883057,-0.6875,-0.683094054,-0.6786654,-0.674214214,-0.669740677,-0.665244967,-0.660727262,-0.656187743,-0.651626587,-0.647043973,-0.642440081,-0.637815088,-0.633169174,-0.628502518,-0.623815298,-0.619107693,-0.614379883,-0.609632045,-0.604864359,-0.600077003,-0.595270157,-0.590443999,-0.585598707,-0.580734462,-0.57585144,-0.570949823,-0.566029787,-0.561091512,-0.556135178,-0.551160961,-0.546169043,-0.5411596,-0.536132813,-0.531088859,-0.526027918,-0.520950168,-0.515855789,-0.510744959,-0.505617857,-0.500474662,-0.495315552,-0.490140706,-0.484950304,-0.479744524,-0.474523544,-0.469287544,-0.464036703,-0.458771199,-0.453491211,-0.448196918,-0.442888498,-0.437566131,-0.432229996,-0.42688027,-0.421517134,-0.416140765,-0.410751343,-0.405349046,-0.399934053,-0.394506544,-0.389066696,-0.383614689,-0.378150702,-0.372674912,-0.3671875,-0.361688644,-0.356178522,-0.350657314,-0.345125198,-0.339582354,-0.334028959,-0.328465194,-0.322891235,-0.317307264,-0.311713457,-0.306109995,-0.300497055,-0.294874817,-0.28924346,-0.283603162,-0.277954102,-0.272296458,-0.266630411,-0.260956138,-0.255273819,-0.249583632,-0.243885756,-0.238180369,-0.232467651,-0.226747781,-0.221020937,-0.215287298,-0.209547043,-0.20380035,-0.1980474,-0.192288369,-0.186523438,-0.180752784,-0.174976587,-0.169195026,-0.163408279,-0.157616526,-0.151819944,-0.146018714,-0.140213013,-0.13440302,-0.128588915,-0.122770876,-0.116949081,-0.111123711,-0.105294943,-0.099462956,-0.09362793,-0.087790042,-0.081949472,-0.076106399,-0.070261002,-0.064413458,-0.058563948,-0.052712649,-0.046859741,-0.041005403,-0.035149813,-0.02929315,-0.023435593,-0.01757732,-0.011718512,-0.005859345,0,0.005859345,0.011718512,0.01757732,0.023435593,0.02929315,0.035149813,0.041005403,0.046859741,0.052712649,0.058563948,0.064413458,0.070261002,0.076106399,0.081949472,0.087790042,0.09362793,0.099462956,0.105294943,0.111123711,0.116949081,0.122770876,0.128588915,0.13440302,0.140213013,0.146018714,0.151819944,0.157616526,0.163408279,0.169195026,0.174976587,0.180752784,0.186523438,0.192288369,0.1980474,0.20380035,0.209547043,0.215287298,0.221020937,0.226747781,0.232467651,0.238180369,0.243885756,0.249583632,0.255273819,0.260956138,0.266630411,0.272296458,0.277954102,0.283603162,0.28924346,0.294874817,0.300497055,0.306109995,0.311713457,0.317307264,0.322891235,0.328465194,0.334028959,0.339582354,0.345125198,0.350657314,0.356178522,0.361688644,0.3671875,0.372674912,0.378150702,0.383614689,0.389066696,0.394506544,0.399934053,0.405349046,0.410751343,0.416140765,0.421517134,0.42688027,0.432229996,0.437566131,0.442888498,0.448196918,0.453491211,0.458771199,0.464036703,0.469287544,0.474523544,0.479744524,0.484950304,0.490140706,0.495315552,0.500474662,0.505617857,0.510744959,0.515855789,0.520950168,0.526027918,0.531088859,0.536132813,0.5411596,0.546169043,0.551160961,0.556135178,0.561091512,0.566029787,0.570949823,0.57585144,0.580734462,0.585598707,0.590443999,0.595270157,0.600077003,0.604864359,0.609632045,0.614379883,0.619107693,0.623815298,0.628502518,0.633169174,0.637815088,0.642440081,0.647043973,0.651626587,0.656187743,0.660727262,0.665244967,0.669740677,0.674214214,0.6786654,0.683094054,0.6875,0.691883057,0.696243048,0.700579792,0.704893112,0.709182829,0.713448763,0.717690736,0.721908569,0.726102084,0.730271101,0.734415442,0.738534927,0.742629379,0.746698618,0.750742465,0.754760742,0.75875327,0.76271987,0.766660362,0.77057457,0.774462312,0.778323412,0.782157689,0.785964966,0.789745063,0.793497801,0.797223002,0.800920486,0.804590076,0.808231592,0.811844856,0.815429688,0.818985909,0.822513342,0.826011807,0.829481125,0.832921118,0.836331606,0.839712411,0.843063354,0.846384257,0.84967494,0.852935225,0.856164932,0.859363884,0.8625319,0.865668803,0.868774414,0.871848553,0.874891043,0.877901703,0.880880356,0.883826822,0.886740923,0.88962248,0.892471313,0.895287246,0.898070097,0.900819689,0.903535843,0.90621838,0.908867121,0.911481887,0.9140625,0.916608781,0.91912055,0.92159763,0.924039841,0.926447004,0.928818941,0.931155473,0.933456421,0.935721606,0.93795085,0.940143973,0.942300797,0.944421142,0.946504831,0.948551685,0.950561523,0.952534169,0.954469442,0.956367165,0.958227158,0.960049242,0.961833239,0.963578969,0.965286255,0.966954917,0.968584776,0.970175654,0.971727371,0.97323975,0.97471261,0.976145774,0.977539063,0.978892297,0.980205297,0.981477886,0.982709885,0.983901113,0.985051394,0.986160547,0.987228394,0.988254756,0.989239454,0.99018231,0.991083145,0.99194178,0.992758036,0.993531734,0.994262695,0.994950742,0.995595694,0.996197373,0.9967556,0.997270197,0.997740984,0.998167783,0.998550415,0.998888701,0.999182463,0.999431521,0.999635696,0.999794811,0.999908686,0.999977142,1};
float softclip_array_exp[513] ={-0.632120559,-0.630680719,-0.629235245,-0.627784112,-0.626327301,-0.624864787,-0.623396549,-0.621922565,-0.620442812,-0.618957267,-0.617465908,-0.615968712,-0.614465656,-0.612956717,-0.611441872,-0.609921099,-0.608394373,-0.606861672,-0.605322972,-0.60377825,-0.602227482,-0.600670644,-0.599107714,-0.597538665,-0.595963476,-0.594382122,-0.592794579,-0.591200822,-0.589600827,-0.58799457,-0.586382026,-0.584763171,-0.58313798,-0.581506429,-0.579868491,-0.578224143,-0.576573359,-0.574916114,-0.573252382,-0.571582139,-0.569905359,-0.568222017,-0.566532085,-0.56483554,-0.563132354,-0.561422503,-0.559705959,-0.557982697,-0.55625269,-0.554515912,-0.552772337,-0.551021937,-0.549264687,-0.547500558,-0.545729526,-0.543951561,-0.542166638,-0.540374729,-0.538575807,-0.536769843,-0.534956812,-0.533136684,-0.531309433,-0.52947503,-0.527633447,-0.525784657,-0.52392863,-0.52206534,-0.520194756,-0.518316852,-0.516431597,-0.514538964,-0.512638923,-0.510731446,-0.508816503,-0.506894065,-0.504964103,-0.503026587,-0.501081488,-0.499128777,-0.497168422,-0.495200395,-0.493224665,-0.491241203,-0.489249977,-0.487250958,-0.485244115,-0.483229417,-0.481206834,-0.479176335,-0.477137889,-0.475091465,-0.473037031,-0.470974556,-0.468904009,-0.466825358,-0.464738571,-0.462643617,-0.460540464,-0.458429079,-0.45630943,-0.454181486,-0.452045213,-0.449900578,-0.44774755,-0.445586095,-0.44341618,-0.441237773,-0.439050839,-0.436855346,-0.43465126,-0.432438548,-0.430217175,-0.427987108,-0.425748313,-0.423500756,-0.421244401,-0.418979216,-0.416705165,-0.414422214,-0.412130327,-0.40982947,-0.407519608,-0.405200705,-0.402872727,-0.400535637,-0.398189399,-0.395833979,-0.39346934,-0.391095446,-0.388712261,-0.386319749,-0.383917872,-0.381506595,-0.37908588,-0.376655691,-0.37421599,-0.371766741,-0.369307906,-0.366839447,-0.364361326,-0.361873507,-0.35937595,-0.356868619,-0.354351474,-0.351824477,-0.349287589,-0.346740773,-0.344183989,-0.341617197,-0.33904036,-0.336453437,-0.333856389,-0.331249177,-0.32863176,-0.326004099,-0.323366154,-0.320717884,-0.318059249,-0.315390208,-0.312710721,-0.310020747,-0.307320245,-0.304609173,-0.30188749,-0.299155155,-0.296412126,-0.293658361,-0.290893818,-0.288118454,-0.285332229,-0.282535098,-0.27972702,-0.276907951,-0.274077849,-0.27123667,-0.268384371,-0.265520908,-0.262646239,-0.259760318,-0.256863101,-0.253954546,-0.251034606,-0.248103239,-0.245160398,-0.242206039,-0.239240118,-0.236262588,-0.233273404,-0.230272521,-0.227259893,-0.224235473,-0.221199217,-0.218151077,-0.215091007,-0.21201896,-0.208934889,-0.205838748,-0.202730489,-0.199610064,-0.196477426,-0.193332528,-0.190175321,-0.187005756,-0.183823787,-0.180629364,-0.177422438,-0.17420296,-0.170970882,-0.167726154,-0.164468726,-0.161198549,-0.157915573,-0.154619748,-0.151311023,-0.147989348,-0.144654673,-0.141306946,-0.137946116,-0.134572133,-0.131184944,-0.127784498,-0.124370743,-0.120943627,-0.117503097,-0.114049102,-0.110581588,-0.107100503,-0.103605793,-0.100097406,-0.096575286,-0.093039382,-0.089489639,-0.085926002,-0.082348417,-0.078756831,-0.075151187,-0.071531431,-0.067897508,-0.064249362,-0.060586937,-0.056910178,-0.053219029,-0.049513433,-0.045793334,-0.042058675,-0.038309398,-0.034545448,-0.030766766,-0.026973294,-0.023164975,-0.019341751,-0.015503563,-0.011650353,-0.007782062,-0.003898631,0,0.003898631,0.007782062,0.011650353,0.015503563,0.019341751,0.023164975,0.026973294,0.030766766,0.034545448,0.038309398,0.042058675,0.045793334,0.049513433,0.053219029,0.056910178,0.060586937,0.064249362,0.067897508,0.071531431,0.075151187,0.078756831,0.082348417,0.085926002,0.089489639,0.093039382,0.096575286,0.100097406,0.103605793,0.107100503,0.110581588,0.114049102,0.117503097,0.120943627,0.124370743,0.127784498,0.131184944,0.134572133,0.137946116,0.141306946,0.144654673,0.147989348,0.151311023,0.154619748,0.157915573,0.161198549,0.164468726,0.167726154,0.170970882,0.17420296,0.177422438,0.180629364,0.183823787,0.187005756,0.190175321,0.193332528,0.196477426,0.199610064,0.202730489,0.205838748,0.208934889,0.21201896,0.215091007,0.218151077,0.221199217,0.224235473,0.227259893,0.230272521,0.233273404,0.236262588,0.239240118,0.242206039,0.245160398,0.248103239,0.251034606,0.253954546,0.256863101,0.259760318,0.262646239,0.265520908,0.268384371,0.27123667,0.274077849,0.276907951,0.27972702,0.282535098,0.285332229,0.288118454,0.290893818,0.293658361,0.296412126,0.299155155,0.30188749,0.304609173,0.307320245,0.310020747,0.312710721,0.315390208,0.318059249,0.320717884,0.323366154,0.326004099,0.32863176,0.331249177,0.333856389,0.336453437,0.33904036,0.341617197,0.344183989,0.346740773,0.349287589,0.351824477,0.354351474,0.356868619,0.35937595,0.361873507,0.364361326,0.366839447,0.369307906,0.371766741,0.37421599,0.376655691,0.37908588,0.381506595,0.383917872,0.386319749,0.388712261,0.391095446,0.39346934,0.395833979,0.398189399,0.400535637,0.402872727,0.405200705,0.407519608,0.40982947,0.412130327,0.414422214,0.416705165,0.418979216,0.421244401,0.423500756,0.425748313,0.427987108,0.430217175,0.432438548,0.43465126,0.436855346,0.439050839,0.441237773,0.44341618,0.445586095,0.44774755,0.449900578,0.452045213,0.454181486,0.45630943,0.458429079,0.460540464,0.462643617,0.464738571,0.466825358,0.468904009,0.470974556,0.473037031,0.475091465,0.477137889,0.479176335,0.481206834,0.483229417,0.485244115,0.487250958,0.489249977,0.491241203,0.493224665,0.495200395,0.497168422,0.499128777,0.501081488,0.503026587,0.504964103,0.506894065,0.508816503,0.510731446,0.512638923,0.514538964,0.516431597,0.518316852,0.520194756,0.52206534,0.52392863,0.525784657,0.527633447,0.52947503,0.531309433,0.533136684,0.534956812,0.536769843,0.538575807,0.540374729,0.542166638,0.543951561,0.545729526,0.547500558,0.549264687,0.551021937,0.552772337,0.554515912,0.55625269,0.557982697,0.559705959,0.561422503,0.563132354,0.56483554,0.566532085,0.568222017,0.569905359,0.571582139,0.573252382,0.574916114,0.576573359,0.578224143,0.579868491,0.581506429,0.58313798,0.584763171,0.586382026,0.58799457,0.589600827,0.591200822,0.592794579,0.594382122,0.595963476,0.597538665,0.599107714,0.600670644,0.602227482,0.60377825,0.605322972,0.606861672,0.608394373,0.609921099,0.611441872,0.612956717,0.614465656,0.615968712,0.617465908,0.618957267,0.620442812,0.621922565,0.623396549,0.624864787,0.626327301,0.627784112,0.629235245,0.630680719,0.632120559};
float softclip_array_scurve[513] = {-0.5,-0.49999617,-0.499984622,-0.499965263,-0.499938004,-0.499902752,-0.499859415,-0.499807899,-0.499748111,-0.499679956,-0.499603338,-0.499518162,-0.499424332,-0.499321748,-0.499210314,-0.499089931,-0.498960499,-0.498821918,-0.498674087,-0.498516906,-0.498350271,-0.498174079,-0.497988229,-0.497792614,-0.497587131,-0.497371675,-0.497146138,-0.496910415,-0.496664398,-0.496407978,-0.496141049,-0.4958635,-0.495575221,-0.495276103,-0.494966034,-0.494644902,-0.494312597,-0.493969004,-0.49361401,-0.493247503,-0.492869367,-0.492479487,-0.492077749,-0.491664037,-0.491238233,-0.490800222,-0.490349885,-0.489887105,-0.489411765,-0.488923744,-0.488422924,-0.487909186,-0.48738241,-0.486842475,-0.486289261,-0.485722646,-0.485142511,-0.484548732,-0.483941188,-0.483319757,-0.482684316,-0.482034743,-0.481370915,-0.480692708,-0.48,-0.479292667,-0.478570585,-0.477833631,-0.477081681,-0.476314611,-0.475532297,-0.474734616,-0.473921442,-0.473092653,-0.472248125,-0.471387733,-0.470511354,-0.469618865,-0.468710142,-0.467785062,-0.466843501,-0.465885338,-0.46491045,-0.463918714,-0.462910008,-0.461884212,-0.460841205,-0.459780864,-0.458703072,-0.457607707,-0.45649465,-0.455363784,-0.45421499,-0.453048152,-0.451863151,-0.450659873,-0.449438202,-0.448198025,-0.446939227,-0.445661695,-0.44436532,-0.443049988,-0.441715592,-0.440362021,-0.43898917,-0.43759693,-0.436185197,-0.434753867,-0.433302836,-0.431832004,-0.43034127,-0.428830536,-0.427299703,-0.425748677,-0.424177363,-0.422585668,-0.420973501,-0.419340773,-0.417687397,-0.416013285,-0.414318355,-0.412602524,-0.410865712,-0.40910784,-0.407328833,-0.405528617,-0.403707118,-0.401864269,-0.4,-0.398114247,-0.396206947,-0.39427804,-0.392327467,-0.390355173,-0.388361104,-0.386345211,-0.384307446,-0.382247763,-0.380166121,-0.37806248,-0.375936804,-0.373789058,-0.371619213,-0.36942724,-0.367213115,-0.364976816,-0.362718327,-0.36043763,-0.358134715,-0.355809573,-0.3534622,-0.351092593,-0.348700754,-0.34628669,-0.343850408,-0.341391922,-0.338911248,-0.336408405,-0.333883418,-0.331336313,-0.328767123,-0.326175883,-0.323562631,-0.320927411,-0.31827027,-0.315591259,-0.312890434,-0.310167853,-0.307423581,-0.304657684,-0.301870235,-0.29906131,-0.29623099,-0.293379358,-0.290506504,-0.287612522,-0.284697509,-0.281761567,-0.278804803,-0.275827328,-0.272829257,-0.269810711,-0.266771813,-0.263712693,-0.260633484,-0.257534324,-0.254415356,-0.251276726,-0.248118586,-0.244941092,-0.241744406,-0.238528691,-0.235294118,-0.23204086,-0.228769098,-0.225479013,-0.222170794,-0.218844632,-0.215500726,-0.212139275,-0.208760485,-0.205364566,-0.201951733,-0.198522204,-0.195076202,-0.191613954,-0.188135693,-0.184641653,-0.181132075,-0.177607203,-0.174067286,-0.170512574,-0.166943325,-0.163359798,-0.159762259,-0.156150974,-0.152526215,-0.148888259,-0.145237384,-0.141573873,-0.137898013,-0.134210093,-0.130510406,-0.12679925,-0.123076923,-0.11934373,-0.115599976,-0.111845971,-0.108082027,-0.104308458,-0.100525584,-0.096733725,-0.092933204,-0.089124347,-0.085307483,-0.081482941,-0.077651056,-0.073812161,-0.069966596,-0.066114698,-0.062256809,-0.058393273,-0.054524433,-0.050650635,-0.046772229,-0.042889562,-0.039002986,-0.035112852,-0.031219512,-0.027323321,-0.023424632,-0.019523802,-0.015621186,-0.011717141,-0.007812023,-0.00390619,0,0.00390619,0.007812023,0.011717141,0.015621186,0.019523802,0.023424632,0.027323321,0.031219512,0.035112852,0.039002986,0.042889562,0.046772229,0.050650635,0.054524433,0.058393273,0.062256809,0.066114698,0.069966596,0.073812161,0.077651056,0.081482941,0.085307483,0.089124347,0.092933204,0.096733725,0.100525584,0.104308458,0.108082027,0.111845971,0.115599976,0.11934373,0.123076923,0.12679925,0.130510406,0.134210093,0.137898013,0.141573873,0.145237384,0.148888259,0.152526215,0.156150974,0.159762259,0.163359798,0.166943325,0.170512574,0.174067286,0.177607203,0.181132075,0.184641653,0.188135693,0.191613954,0.195076202,0.198522204,0.201951733,0.205364566,0.208760485,0.212139275,0.215500726,0.218844632,0.222170794,0.225479013,0.228769098,0.23204086,0.235294118,0.238528691,0.241744406,0.244941092,0.248118586,0.251276726,0.254415356,0.257534324,0.260633484,0.263712693,0.266771813,0.269810711,0.272829257,0.275827328,0.278804803,0.281761567,0.284697509,0.287612522,0.290506504,0.293379358,0.29623099,0.29906131,0.301870235,0.304657684,0.307423581,0.310167853,0.312890434,0.315591259,0.31827027,0.320927411,0.323562631,0.326175883,0.328767123,0.331336313,0.333883418,0.336408405,0.338911248,0.341391922,0.343850408,0.34628669,0.348700754,0.351092593,0.3534622,0.355809573,0.358134715,0.36043763,0.362718327,0.364976816,0.367213115,0.36942724,0.371619213,0.373789058,0.375936804,0.37806248,0.380166121,0.382247763,0.384307446,0.386345211,0.388361104,0.390355173,0.392327467,0.39427804,0.396206947,0.398114247,0.4,0.401864269,0.403707118,0.405528617,0.407328833,0.40910784,0.410865712,0.412602524,0.414318355,0.416013285,0.417687397,0.419340773,0.420973501,0.422585668,0.424177363,0.425748677,0.427299703,0.428830536,0.43034127,0.431832004,0.433302836,0.434753867,0.436185197,0.43759693,0.43898917,0.440362021,0.441715592,0.443049988,0.44436532,0.445661695,0.446939227,0.448198025,0.449438202,0.450659873,0.451863151,0.453048152,0.45421499,0.455363784,0.45649465,0.457607707,0.458703072,0.459780864,0.460841205,0.461884212,0.462910008,0.463918714,0.46491045,0.465885338,0.466843501,0.467785062,0.468710142,0.469618865,0.470511354,0.471387733,0.472248125,0.473092653,0.473921442,0.474734616,0.475532297,0.476314611,0.477081681,0.477833631,0.478570585,0.479292667,0.48,0.480692708,0.481370915,0.482034743,0.482684316,0.483319757,0.483941188,0.484548732,0.485142511,0.485722646,0.486289261,0.486842475,0.48738241,0.487909186,0.488422924,0.488923744,0.489411765,0.489887105,0.490349885,0.490800222,0.491238233,0.491664037,0.492077749,0.492479487,0.492869367,0.493247503,0.49361401,0.493969004,0.494312597,0.494644902,0.494966034,0.495276103,0.495575221,0.4958635,0.496141049,0.496407978,0.496664398,0.496910415,0.497146138,0.497371675,0.497587131,0.497792614,0.497988229,0.498174079,0.498350271,0.498516906,0.498674087,0.498821918,0.498960499,0.499089931,0.499210314,0.499321748,0.499424332,0.499518162,0.499603338,0.499679956,0.499748111,0.499807899,0.499859415,0.499902752,0.499938004,0.499965263,0.499984622,0.49999617,0.5};
float softclip_array_log[513] = {-1,-0.998516425,-0.997027554,-0.995533348,-0.99403377,-0.992528779,-0.991018338,-0.989502406,-0.987980944,-0.98645391,-0.984921264,-0.983382965,-0.981838971,-0.980289239,-0.978733727,-0.977172391,-0.975605187,-0.974032072,-0.972453,-0.970867926,-0.969276805,-0.967679589,-0.966076233,-0.964466689,-0.962850909,-0.961228844,-0.959600445,-0.957965663,-0.956324447,-0.954676747,-0.953022511,-0.951361687,-0.949694222,-0.948020063,-0.946339156,-0.944651447,-0.94295688,-0.941255399,-0.939546948,-0.937831469,-0.936108904,-0.934379194,-0.93264228,-0.930898102,-0.929146598,-0.927387708,-0.925621367,-0.923847513,-0.922066082,-0.920277009,-0.918480227,-0.91667567,-0.914863271,-0.913042961,-0.91121467,-0.909378329,-0.907533866,-0.905681209,-0.903820285,-0.90195102,-0.900073338,-0.898187164,-0.89629242,-0.894389029,-0.89247691,-0.890555984,-0.888626168,-0.886687381,-0.884739538,-0.882782555,-0.880816344,-0.87884082,-0.876855893,-0.874861473,-0.872857469,-0.870843789,-0.868820338,-0.866787022,-0.864743743,-0.862690403,-0.860626904,-0.858553143,-0.856469019,-0.854374427,-0.852269262,-0.850153416,-0.84802678,-0.845889243,-0.843740695,-0.841581019,-0.839410101,-0.837227823,-0.835034066,-0.832828707,-0.830611623,-0.82838269,-0.82614178,-0.823888763,-0.821623508,-0.819345882,-0.817055748,-0.814752968,-0.812437401,-0.810108906,-0.807767337,-0.805412546,-0.803044383,-0.800662695,-0.798267327,-0.795858121,-0.793434917,-0.790997549,-0.788545852,-0.786079657,-0.783598791,-0.781103078,-0.77859234,-0.776066394,-0.773525055,-0.770968135,-0.768395441,-0.765806777,-0.763201944,-0.760580739,-0.757942954,-0.755288378,-0.752616797,-0.749927991,-0.747221736,-0.744497805,-0.741755965,-0.738995979,-0.736217605,-0.733420596,-0.730604702,-0.727769664,-0.724915222,-0.722041107,-0.719147047,-0.716232763,-0.71329797,-0.710342377,-0.707365688,-0.704367599,-0.7013478,-0.698305975,-0.695241799,-0.692154943,-0.689045067,-0.685911826,-0.682754867,-0.679573826,-0.676368335,-0.673138013,-0.669882475,-0.666601322,-0.663294148,-0.659960538,-0.656600066,-0.653212294,-0.649796776,-0.646353054,-0.642880658,-0.639379106,-0.635847904,-0.632286547,-0.628694515,-0.625071274,-0.621416278,-0.617728965,-0.614008758,-0.610255066,-0.60646728,-0.602644775,-0.598786908,-0.59489302,-0.590962431,-0.586994443,-0.582988337,-0.578943375,-0.574858794,-0.57073381,-0.566567618,-0.562359385,-0.558108253,-0.55381334,-0.549473734,-0.545088495,-0.540656653,-0.536177207,-0.531649124,-0.527071335,-0.522442737,-0.517762189,-0.513028513,-0.508240488,-0.503396852,-0.498496297,-0.493537471,-0.48851897,-0.483439341,-0.478297076,-0.473090612,-0.467818324,-0.462478528,-0.457069472,-0.451589335,-0.446036225,-0.440408172,-0.434703126,-0.42891895,-0.423053419,-0.417104211,-0.411068905,-0.404944971,-0.398729768,-0.392420534,-0.386014381,-0.379508283,-0.372899074,-0.366183431,-0.359357872,-0.352418737,-0.345362183,-0.338184167,-0.330880436,-0.323446507,-0.315877653,-0.308168887,-0.300314937,-0.292310231,-0.284148867,-0.275824591,-0.267330766,-0.258660341,-0.249805818,-0.240759207,-0.23151199,-0.222055068,-0.212378709,-0.202472485,-0.192325211,-0.181924862,-0.171258491,-0.16031213,-0.149070684,-0.137517802,-0.125635733,-0.113405168,-0.100805043,-0.087812329,-0.074401772,-0.060545601,-0.04621318,-0.031370603,-0.015980208,0,0.015980208,0.031370603,0.04621318,0.060545601,0.074401772,0.087812329,0.100805043,0.113405168,0.125635733,0.137517802,0.149070684,0.16031213,0.171258491,0.181924862,0.192325211,0.202472485,0.212378709,0.222055068,0.23151199,0.240759207,0.249805818,0.258660341,0.267330766,0.275824591,0.284148867,0.292310231,0.300314937,0.308168887,0.315877653,0.323446507,0.330880436,0.338184167,0.345362183,0.352418737,0.359357872,0.366183431,0.372899074,0.379508283,0.386014381,0.392420534,0.398729768,0.404944971,0.411068905,0.417104211,0.423053419,0.42891895,0.434703126,0.440408172,0.446036225,0.451589335,0.457069472,0.462478528,0.467818324,0.473090612,0.478297076,0.483439341,0.48851897,0.493537471,0.498496297,0.503396852,0.508240488,0.513028513,0.517762189,0.522442737,0.527071335,0.531649124,0.536177207,0.540656653,0.545088495,0.549473734,0.55381334,0.558108253,0.562359385,0.566567618,0.57073381,0.574858794,0.578943375,0.582988337,0.586994443,0.590962431,0.59489302,0.598786908,0.602644775,0.60646728,0.610255066,0.614008758,0.617728965,0.621416278,0.625071274,0.628694515,0.632286547,0.635847904,0.639379106,0.642880658,0.646353054,0.649796776,0.653212294,0.656600066,0.659960538,0.663294148,0.666601322,0.669882475,0.673138013,0.676368335,0.679573826,0.682754867,0.685911826,0.689045067,0.692154943,0.695241799,0.698305975,0.7013478,0.704367599,0.707365688,0.710342377,0.71329797,0.716232763,0.719147047,0.722041107,0.724915222,0.727769664,0.730604702,0.733420596,0.736217605,0.738995979,0.741755965,0.744497805,0.747221736,0.749927991,0.752616797,0.755288378,0.757942954,0.760580739,0.763201944,0.765806777,0.768395441,0.770968135,0.773525055,0.776066394,0.77859234,0.781103078,0.783598791,0.786079657,0.788545852,0.790997549,0.793434917,0.795858121,0.798267327,0.800662695,0.803044383,0.805412546,0.807767337,0.810108906,0.812437401,0.814752968,0.817055748,0.819345882,0.821623508,0.823888763,0.82614178,0.82838269,0.830611623,0.832828707,0.835034066,0.837227823,0.839410101,0.841581019,0.843740695,0.845889243,0.84802678,0.850153416,0.852269262,0.854374427,0.856469019,0.858553143,0.860626904,0.862690403,0.864743743,0.866787022,0.868820338,0.870843789,0.872857469,0.874861473,0.876855893,0.87884082,0.880816344,0.882782555,0.884739538,0.886687381,0.888626168,0.890555984,0.89247691,0.894389029,0.89629242,0.898187164,0.900073338,0.90195102,0.903820285,0.905681209,0.907533866,0.909378329,0.91121467,0.913042961,0.914863271,0.91667567,0.918480227,0.920277009,0.922066082,0.923847513,0.925621367,0.927387708,0.929146598,0.930898102,0.93264228,0.934379194,0.936108904,0.937831469,0.939546948,0.941255399,0.94295688,0.944651447,0.946339156,0.948020063,0.949694222,0.951361687,0.953022511,0.954676747,0.956324447,0.957965663,0.959600445,0.961228844,0.962850909,0.964466689,0.966076233,0.967679589,0.969276805,0.970867926,0.972453,0.974032072,0.975605187,0.977172391,0.978733727,0.980289239,0.981838971,0.983382965,0.984921264,0.98645391,0.987980944,0.989502406,0.991018338,0.992528779,0.99403377,0.995533348,0.997027554,0.998516425,1};

byte status[8] = {0,0,0,0,0,0,0,0};
  //status of the voice
  //0 = voice not sustained or releasing
  //1 = voice releasing
  //2 = voice sustained
byte voiceNotes[8];
//stores the notes assigned to each voice for use with note off
float AMPEG_level[8];
float MODEG1_level[8];
float MODEG2_level[8];
float LFO1_level[8];
//LFO 1 levels, updated using rms.read
bool LFO1_reset = true;
//whether or not LFO 1 syncs when note is pressed
float LFO1_staticFreq = 0.2;
float LFO2_level[8];
bool LFO2_reset = true;
float LFO2_staticFreq = 0.2;
float LFO3_level[8];
bool LFO3_reset = true;
float LFO3_staticFreq = 0.2;
float destinationBuffer[128][8];
//Holds modulation information for all destinations and for all voices
int slot_select = 0;
byte source[32];
byte destination[32];
float modulation_amount[32];
byte currentSlot = 0;
byte Filter1_mode = 0;
byte Filter2_mode =0;
//0: SVF LP, 1:SVF BP, 2:SVF HP, 3:Ladder
float f_encVal = 0;
float f_encVal2 = 0;
float q_encVal = 0;
float q_encVal2 = 0;
float f_centre = 440;
float f_centre2 = 440;
float Filter1_resonance = 0;
float Filter2_resonance =0;
float PassbandGain = 0;
//passband gain for ladder
float InputDrive1 = 1;
float InputDrive2 = 1;
//input gain for filters
byte filterRouting =0;
float parallel_filterMix =0;

float shaper_gain = 1;

float reverb_wetdry =0;
float reverb_size =0;
float reverb_lowpass =0;
float reverb_diffusion =0;
float reverb_gfxTime= 0;


float osc1_noteFreq[8];
int osc1_oct = 0;
int osc1_semi = 0;
int osc1_cent = 0;

float morph[8] = {0,0,0,0,0,0,0,0};
float morph_static = 0;
float timbre_static = 0;
float timbre[8] = {0,0,0,0,0,0,0,0};
bool step_mode = true;
int step_mode_int = 0;
bool nwaves = false; //false: 1 wave, true: 2 wave
int nwaves_int = 0; //used to convert encoder rotation into bool
//oscillator controls

byte alg1ModeA[8] = {1,1,1,1,1,1,1,1};
byte alg1ModeB[8] = {0,0,0,0,0,0,0,0};
//algorithm 1 specific

int menu_state =0;
//currently selected menu

float envelopeTimes[4][4];
//amp,mod1,mod2,mod3
//a,d,s,r

int encoderValues[128][4];
//records previous encoder values for all menus

float val;

int lastMillis = 0;
//used for loop timing

int lastMillis_screen =0;

AudioConnection* patchCords[12];
//for connecting voice mixers
AudioConnection* patchCords_lfo[24];
//for connecting LFO
AudioConnection* patchCords_eg[48];
//for connecting mod envelopes
AudioConnection* patchCords_amp[72];
//for connecting amp
AudioConnection* patchCords_filter[160];
//for connecting filters

AudioConnection* patchCords_reverb[8];

void setup() {

  render.initializeDisplay();
  connectAudio();
  Serial.begin(115200);
  //initialize serial communication
  usbMIDI.setHandleControlChange(myControlChange);
  usbMIDI.setHandleNoteOn(myNoteOn);
  usbMIDI.setHandleNoteOff(myNoteOff);
  //Adds midi handles for note and CC
  AudioMemory(200);
  //Add audio memory enables the audio library
  sgtl5000_1.enable();
  sgtl5000_1.volume(0.8);

  // display
  for(int i=0; i<8; i++){
    softclip[i] -> shape(softclip_array_cubic,513);
  }

  // Initialize select pins as outputs
  for (int i = 0; i < 4; i++) {
    pinMode(selectPins[i], OUTPUT);
  }
  
  // Initialize the read pin as an input
  pinMode(readPin, INPUT);

  for(byte i=0; i<32; i++)
  {
    source[i] = 0;
    destination[i] = 0;
    modulation_amount[i] =0;
  }

  for(int i=0;i<128;i++){
    for(int j=0; j<4;j++){
      encoderValues[i][j]=0;
    }
  }
  Enc1.write(0);
  Enc2.write(0);
  Enc3.write(0);
  Enc4.write(0);
  AudioNoInterrupts();
  for (byte i = 0; i < 8; i++) {
  Osc1_alg1_waveformA[i] -> begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
  Osc1_alg1_waveformA[i] -> frequency(220);
  Osc1_alg1_waveformA[i] -> amplitude(0.5);
  Osc1_alg1_waveformB[i] -> begin(WAVEFORM_BANDLIMIT_SQUARE);
  Osc1_alg1_waveformB[i] -> frequency(220);
  Osc1_alg1_waveformB[i] -> amplitude(0.5);
  Osc1_alg1_waveformC[i] -> begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
  Osc1_alg1_waveformC[i] -> frequency(220);
  Osc1_alg1_waveformC[i] -> amplitude(0.5);
  Osc1_alg1_waveformD[i] -> begin(WAVEFORM_BANDLIMIT_SQUARE);
  Osc1_alg1_waveformD[i] -> frequency(220);
  Osc1_alg1_waveformD[i] -> amplitude(0.5);
  Osc1_alg1_waveformA[i] -> sync();
  Osc1_alg1_waveformB[i] -> sync();
  Osc1_alg1_waveformC[i] -> sync();
  Osc1_alg1_waveformD[i] -> sync();
  AudioInterrupts();
  Osc1_alg1_mix[i] -> gain(0,0.5);
  Osc1_alg1_mix[i] -> gain(1,0.5);
  }
  //set all waveforms to output

}
void connectAudio(){
  for(int i=0; i<8; i++){
    patchCords_amp[i] = new AudioConnection(amp.AMP_base, 0, *amp.eg[i],0);
    patchCords_amp[i+8] = new AudioConnection(*amp.eg[i], 0, *amp.eg_mult[i],0);
    patchCords_amp[i+16] = new AudioConnection(*amp.dc[i], 0, *amp.eg_mult[i], 1);
    patchCords_amp[i+24] = new AudioConnection(*amp.eg_mult[i], 0, *amp.signal_mult[i], 0);
    patchCords_amp[i+40] = new AudioConnection(*amp.eg_mult[i], 0, *amp.rms_eg[i], 0);

    patchCords_amp[i+48] = new AudioConnection(*filter.outMix[i], 0, *shaperAmp[i], 0);
    patchCords_amp[i+56] = new AudioConnection(*shaperAmp[i], 0, *softclip[i], 0);
    patchCords_amp[i+64] = new AudioConnection(*softclip[i], 0, *amp.signal_mult[i], 1);

    patchCords_eg[i] = new AudioConnection(*Envelope1.dc[i], 0, *Envelope1.eg[i], 0);
    patchCords_eg[i+8] = new AudioConnection(*Envelope2.dc[i], 0, *Envelope2.eg[i], 0);
    patchCords_eg[i+16] = new AudioConnection(*Envelope3.dc[i], 0, *Envelope3.eg[i], 0);
    patchCords_eg[i+24] = new AudioConnection(*Envelope1.eg[i], 0, *Envelope1.rms_eg[i], 0);
    patchCords_eg[i+32] = new AudioConnection(*Envelope2.eg[i], 0, *Envelope2.rms_eg[i], 0);
    patchCords_eg[i+40] = new AudioConnection(*Envelope3.eg[i], 0, *Envelope3.rms_eg[i], 0);
    patchCords_filter[i] = new AudioConnection(*filter.mixA[i], 0, *filter.outMix[i], 0);
    patchCords_filter[i+8] = new AudioConnection(*filter.mixB[i], 0, *filter.outMix[i], 1);
    patchCords_filter[i+24] = new AudioConnection(*filter.svfB[i], 0, *filter.mixB[i], 0);
    patchCords_filter[i+32] = new AudioConnection(*filter.svfB[i], 1, *filter.mixB[i], 1);
    patchCords_filter[i+128] = new AudioConnection(*filter.svfB[i], 2, *filter.mixB[i], 2);
    patchCords_filter[i+40] = new AudioConnection(*filter.svfA[i], 0, *filter.mixA[i], 0);
    patchCords_filter[i+48] = new AudioConnection(*filter.svfA[i], 1, *filter.mixA[i], 1);
    patchCords_filter[i+56] = new AudioConnection(*filter.svfA[i], 2, *filter.mixA[i], 2);
    patchCords_filter[i+64] = new AudioConnection(*filter.ladder[i], 0, *filter.mixA[i], 3);
    patchCords_filter[i+72] = new AudioConnection(*filter.mixA[i], 0, *filter.inMixB[i], 1);
    patchCords_filter[i+88] = new AudioConnection(*filter.inMixB[i], 0, *filter.svfB[i], 0);
    patchCords_filter[i+96] = new AudioConnection(*filter.mixB[i], 0, *filter.inMixA[i], 1);
    patchCords_filter[i+112] = new AudioConnection(*filter.inMixA[i], 0, *filter.svfA[i], 0);
    patchCords_filter[i+120] = new AudioConnection(*filter.inMixA[i], 0, *filter.ladder[i], 0);



  }

  patchCords_reverb[0] = new AudioConnection(mixerManager.mixer3, 0, reverb.freeverb, 0);
  patchCords_reverb[1] = new AudioConnection(mixerManager.mixer3, 0, reverb.freeverb, 1);
  patchCords_reverb[2] = new AudioConnection(mixerManager.mixer3, 0, reverb.mixerL, 0);
  patchCords_reverb[3] = new AudioConnection(mixerManager.mixer3, 0, reverb.mixerR, 0);
  patchCords_reverb[4] = new AudioConnection(reverb.freeverb, 0, reverb.mixerL, 1);
  patchCords_reverb[5] = new AudioConnection(reverb.freeverb, 1, reverb.mixerR, 1);
//-----------------------------------------------------------------------------------------

  patchCords_filter[80] = new AudioConnection(alg1_mix1, 0, filter.inMixB1, 0);
  patchCords_filter[81] = new AudioConnection(alg1_mix2, 0, filter.inMixB2, 0);
  patchCords_filter[82] = new AudioConnection(alg1_mix3, 0, filter.inMixB3, 0);
  patchCords_filter[83] = new AudioConnection(alg1_mix4, 0, filter.inMixB4, 0);
  patchCords_filter[84] = new AudioConnection(alg1_mix5, 0, filter.inMixB5, 0);
  patchCords_filter[85] = new AudioConnection(alg1_mix6, 0, filter.inMixB6, 0);
  patchCords_filter[86] = new AudioConnection(alg1_mix7, 0, filter.inMixB7, 0);
  patchCords_filter[87] = new AudioConnection(alg1_mix8, 0, filter.inMixB8, 0);

  patchCords_filter[104] = new AudioConnection(alg1_mix1, 0, filter.inMixA1, 0);
  patchCords_filter[105] = new AudioConnection(alg1_mix2, 0, filter.inMixA2, 0);
  patchCords_filter[106] = new AudioConnection(alg1_mix3, 0, filter.inMixA3, 0);
  patchCords_filter[107] = new AudioConnection(alg1_mix4, 0, filter.inMixA4, 0);
  patchCords_filter[108] = new AudioConnection(alg1_mix5, 0, filter.inMixA5, 0);
  patchCords_filter[109] = new AudioConnection(alg1_mix6, 0, filter.inMixA6, 0);
  patchCords_filter[110] = new AudioConnection(alg1_mix7, 0, filter.inMixA7, 0);
  patchCords_filter[111] = new AudioConnection(alg1_mix8, 0, filter.inMixA8, 0);





  patchCords[0] = new AudioConnection(amp.signal_mult1, 0, mixerManager.mixer1, 0);
  patchCords[1] = new AudioConnection(amp.signal_mult2, 0, mixerManager.mixer1, 1);
  patchCords[2] = new AudioConnection(amp.signal_mult3, 0, mixerManager.mixer1, 2);
  patchCords[3] = new AudioConnection(amp.signal_mult4, 0, mixerManager.mixer1, 3);
  patchCords[4] = new AudioConnection(amp.signal_mult5, 0, mixerManager.mixer2, 0);
  patchCords[5] = new AudioConnection(amp.signal_mult6, 0, mixerManager.mixer2, 1);
  patchCords[6] = new AudioConnection(amp.signal_mult7, 0, mixerManager.mixer2, 2);
  patchCords[7] = new AudioConnection(amp.signal_mult8, 0, mixerManager.mixer2, 3);
  patchCords[8] = new AudioConnection(mixerManager.mixer1, 0, mixerManager.mixer3, 0);
  patchCords[9] = new AudioConnection(mixerManager.mixer2, 0, mixerManager.mixer3, 1);
  patchCords[10] = new AudioConnection(reverb.mixerL, 0, i2s1, 0);
  patchCords[11] = new AudioConnection(reverb.mixerR, 1, i2s1, 1);
}
void loop() {
  usbMIDI.read();
  if((millis() - lastMillis) > 2)
  {
    //AudioNoInterrupts();   
    
    updateEncoders();
    readMuxChannels();
    //AudioInterrupts();

    generateModulation();
    alg1();
    //update crossfading
    //TODO MOVE MIDI INTO FASTER LOOP
    //called every 2 ms to improve performance
    lastMillis = millis();
    if(((millis() - lastMillis_screen))>33){
      refreshScreen();
      lastMillis_screen = millis();
      //update at 10hz
    }
  }
}
void egTimeScale(float inc, int i , int j){
    if (envelopeTimes[i][j] < 20) {
        envelopeTimes[i][j] += inc;  // Increment by 1 if under 20 ms
    } else if (envelopeTimes[i][j] < 40) {
        envelopeTimes[i][j] += 2 * inc;  // Increment by 2 if under 40 ms
    } else if (envelopeTimes[i][j] < 200) {
        envelopeTimes[i][j] += 5 * inc;  // Increment by 5 if under 200 ms
    } else if (envelopeTimes[i][j] < 500) {
        envelopeTimes[i][j] += 10 * inc;  // Increment by 10 if under 500 ms
    } else {
        envelopeTimes[i][j] += 20 * inc;  // Increment by 20 otherwise
    }
    envelopeTimes[i][j] = constrain(envelopeTimes[i][j], 0, 10000);
}
float quantizeSignal(float input) {
    // Define the quantization levels
    const float levels[] = {0.0, 0.25, 0.5, 0.75, 0.81, 0.87, 0.93, 0.99};
    const int numLevels = sizeof(levels) / sizeof(levels[0]);

    // Edge case for the lower boundary
    if (input <= levels[0]) return levels[0];

    // Find the closest level
    for (int i = 1; i < numLevels; i++) {
        if (input <= levels[i]) {
            // Check if the input is closer to the current level or the previous level
            if ((input - levels[i-1]) < (levels[i] - input)) {
                return levels[i-1];
            } else {
                return levels[i];
            }
        }
    }

    // Edge case for the upper boundary
    return levels[numLevels - 1];
}
void readMuxChannels() {
  // Loop through all 16 channels of the multiplexer
  for (int channel = 0; channel < 16; channel++) {
    // Set the selector pins
    for (int i = 0; i < 4; i++) {
      // Set each select pin high or low based on channel number
      digitalWrite(selectPins[i], (channel & (1 << i)) >> i);
    }

    // Read the value from the current channel
    muxValues[channel] = analogRead(readPin);
  }
  //Serial.println(muxValues[0]);
}
void updateEncoders(){
  float inc;
  int x;
  switch(menu_state){
    case 0://MOD EG1
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      egTimeScale(inc, 0,0);
      for(int i=0;i<8;i++)(Envelope1.attack(i,envelopeTimes[0][0]));
      Serial.print("max cpu: ");
      Serial.print(AudioProcessorUsageMax());
      Serial.print("MODEG1| Attack: ");
      Serial.print(envelopeTimes[0][0]);


      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      egTimeScale(inc, 0,1);
      for(int i=0;i<8;i++)(Envelope1.decay(i,envelopeTimes[0][1]));
      Serial.print(" Decay: ");
      Serial.print(envelopeTimes[0][1]);


      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      envelopeTimes[0][2] += (inc * 0.01);
      envelopeTimes[0][2] = constrain(envelopeTimes[0][2],0,1);
      for(int i=0;i<8;i++)(Envelope1.sustain(i,envelopeTimes[0][2]));
      Serial.print(" Sustain: ");
      Serial.print(envelopeTimes[0][2]);


      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      egTimeScale(inc, 0,3);
      for(int i=0;i<8;i++)(Envelope1.release(i,envelopeTimes[0][3]));
      Serial.print(" Release: ");
      Serial.print(envelopeTimes[0][3]);

      Serial.println(" ");  
      break;
    case 1://MOD EG2
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      egTimeScale(inc, 1,0);
      for(int i=0;i<8;i++)(Envelope2.attack(i,envelopeTimes[1][0]));
      Serial.print("MODEG2| Attack: ");
      Serial.print(envelopeTimes[1][0]);


      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      egTimeScale(inc, 1,1);
      for(int i=0;i<8;i++)(Envelope2.decay(i,envelopeTimes[1][1]));
      Serial.print(" Decay: ");
      Serial.print(envelopeTimes[1][1]);


      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      envelopeTimes[1][2] += (inc * 0.01);
      envelopeTimes[1][2] = constrain(envelopeTimes[1][2],0,1);
      for(int i=0;i<8;i++)(Envelope2.sustain(i,envelopeTimes[1][2]));
      Serial.print(" Sustain: ");
      Serial.print(envelopeTimes[1][2]);

      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      egTimeScale(inc, 1,3);
      for(int i=0;i<8;i++)(Envelope2.release(i,envelopeTimes[1][3]));
      Serial.print(" Release: ");
      Serial.print(envelopeTimes[1][3]);
      Serial.println(" ");  
      break;
    case 2://MOD EG3
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      egTimeScale(inc, 2,0);
      for(int i=0;i<8;i++)(Envelope3.attack(i,envelopeTimes[2][0]));
      Serial.print("MODEG3| Attack: ");
      Serial.print(envelopeTimes[2][0]);


      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      egTimeScale(inc, 2,1);
      for(int i=0;i<8;i++)(Envelope3.decay(i,envelopeTimes[2][1]));
      Serial.print(" Decay: ");
      Serial.print(envelopeTimes[2][1]);


      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      envelopeTimes[2][2] += (inc * 0.01);
      envelopeTimes[2][2] = constrain(envelopeTimes[2][2],0,1);
      for(int i=0;i<8;i++)(Envelope3.sustain(i,envelopeTimes[2][2]));
      Serial.print(" Sustain: ");
      Serial.print(envelopeTimes[2][2]);


      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      egTimeScale(inc, 2,3);
      for(int i=0;i<8;i++)(Envelope3.release(i,envelopeTimes[2][3]));
      Serial.print(" Release: ");
      Serial.print(envelopeTimes[2][3]);
      Serial.println(" ");

      break;
    case 3: //amp eg
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      egTimeScale(inc, 3,0);
      for(int i=0;i<8;i++)(amp.attack(i,envelopeTimes[3][0]));
      Serial.print(" AMP EG| Attack: ");
      Serial.print(envelopeTimes[3][0]);


      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      egTimeScale(inc, 3,1);
      for(int i=0;i<8;i++)(amp.decay(i,envelopeTimes[3][1]));
      Serial.print(" Decay: ");
      Serial.print(envelopeTimes[3][1]);


      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      envelopeTimes[3][2] += (inc * 0.01);
      envelopeTimes[3][2] = constrain(envelopeTimes[3][2],0,1);
      for(int i=0;i<8;i++)(amp.sustain(i,envelopeTimes[3][2]));
      Serial.print(" Sustain: ");
      Serial.print(envelopeTimes[3][2]);

      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      egTimeScale(inc, 3,3);
      for(int i=0;i<8;i++)(amp.release(i,envelopeTimes[3][3]));
      Serial.print(" Release: ");
      Serial.print(envelopeTimes[3][3]);
      Serial.println(" ");

      break;
    case 4://LFO 1
      val = Enc1.read();
      encoderValues[4][0] = val;
      val = float(val) * 0.05; //sensitivity
      x = floor(val);
      x = x%8; //number of intervals
      x = abs(x);
      setLfoType(0,x);
      Serial.print("LFO| type: ");
      Serial.print(x);

      AudioNoInterrupts();
      val = constrain(Enc2.read(),0,200);
      Enc2.write(val);
      AudioInterrupts();
      encoderValues[4][1] = int(val);
      val = float(val) / 200.00;
      LFO1_staticFreq = val;
      val = 20 * pow(val,3.322);
      Serial.print(" Frequency: ");
      Serial.print(val);
      Serial.print("Hz");

      val = constrain(Enc3.read(),0,200);
      Enc3.write(val);
      encoderValues[4][2] = int(val);
      val = float(val) / 200.00;
      lfo1.pulseWidth(val);
      Serial.print(" pulse width: ");
      Serial.print(val);

      val = Enc4.read();
      encoderValues[4][3] = val;
      val = float(val) * 0.02; //sensitivity
      x = abs(val);
      x = floor(x);
      x = x%2; //number of intervals
      if(x==0){
        LFO1_reset = true;
      }
      else{
        if(LFO1_reset == true){
          for(int i=0;i<8;i++){
            lfo1.sync(i);
          }
        }
        LFO1_reset = false;

      }
      Serial.print(" reset: ");
      Serial.print(x);
      Serial.println();
      break;
    case 5://Reverb
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      reverb_wetdry += inc * 0.01;
      reverb_wetdry = constrain(reverb_wetdry,0,1);
      reverb.wetdry(reverb_wetdry);

      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      reverb_size += inc * 0.01;
      reverb_size = constrain(reverb_size,0,1);
      reverb.Size(reverb_size);

      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      reverb_lowpass += inc * 0.01;
      reverb_lowpass = constrain(reverb_lowpass,0,1);
      reverb.Lowpass(reverb_lowpass);

      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      reverb_diffusion += inc * 0.01;
      reverb_diffusion = constrain(reverb_diffusion,0,1);
      reverb.Diffusion(reverb_diffusion);
      break;
    case 6://filters
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      f_encVal = f_encVal + (inc * 0.01);
      f_encVal = constrain(f_encVal,0,1);
      f_centre = midiFilterFreq(byte(f_encVal*127));

      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      f_encVal2 = f_encVal2 + (inc * 0.01);
      f_encVal2 = constrain(f_encVal2,0,1);
      f_centre2 = midiFilterFreq(byte(f_encVal2*127));

      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      q_encVal = q_encVal + (inc * 0.01);
      q_encVal = constrain(q_encVal,0,1);
      Filter1_resonance = q_encVal;

      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      q_encVal2 = q_encVal2 + (inc * 0.01);
      q_encVal2 = constrain(q_encVal2,0,1);
      Filter2_resonance = q_encVal2;
      break;
  case 7: //Oscillator 1 - screen 1
      inc = Enc1.read();
      inc = constrain(inc,-1,1);
      Enc1.write(0);
      morph_static = morph_static + (inc * 0.01);
      morph_static = constrain(morph_static,0,1);

      inc = Enc2.read();
      inc = constrain(inc,-1,1);
      Enc2.write(0);
      timbre_static = timbre_static + (inc * 0.01);
      timbre_static = constrain(timbre_static,0,1);

      inc = Enc3.read();
      inc = constrain(inc,-1,1);
      Enc3.write(0);
      nwaves_int += inc;
      if(nwaves_int>20)(nwaves_int=0);
      if(nwaves_int<0)(nwaves_int=20);
      if(nwaves_int < 10)(nwaves = false);
      if(nwaves_int>10)(nwaves = true);
      if(nwaves == false){
        for(int i=0;i<8;i++){
          Osc1_alg1_waveformA[i] -> amplitude(0);
          Osc1_alg1_waveformB[i] -> amplitude(0);
        }
      }
      if(nwaves == true){
        for(int i=0;i<8;i++){
          Osc1_alg1_waveformA[i] -> amplitude(0.5);
          Osc1_alg1_waveformB[i] -> amplitude(0.5);
        }
      }

      inc = Enc4.read();
      inc = constrain(inc,-1,1);
      Enc4.write(0);
      step_mode_int += inc;
      if(step_mode_int>20)(step_mode_int=0);
      if(step_mode_int<0)(step_mode_int=20);
      if(step_mode_int < 10)(step_mode = false);
      if(step_mode_int>10)(step_mode = true);

      break;

  case 8://Modulation selector
    inc = Enc1.read();
    inc = constrain(inc,-1,1);
    Enc1.write(0);
    slot_select = slot_select + inc;
    currentSlot = constrain(int(float(slot_select) / 10),0,31);
    Serial.println(currentSlot);
    break;
  
  case 9://wave shaper
    inc = Enc1.read();
    inc = constrain(inc,-1,1);
    Enc1.write(0);
    shaper_gain += (inc * 0.05);
    shaper_gain = constrain(shaper_gain,0,25);
    for(int i=0; i<8; i++){
      shaperAmp[i] -> gain(shaper_gain);
    }
    break;

  }
}

void refreshScreen(){
  if(menu_state < 4){
    render.drawEnvelope(menu_state,envelopeTimes);
  }
  if(menu_state  ==5 ){
    reverb_gfxTime += 0.005;
    if(reverb_gfxTime > 10000)(reverb_gfxTime = 0);//prevents getting too large
    render.drawReverb(reverb_wetdry,reverb_size,reverb_lowpass,reverb_diffusion,reverb_gfxTime);
  }
  if(menu_state  == 6){
    render.drawFilter(f_centre,f_centre2,Filter1_resonance,Filter2_resonance);
  }
  if(menu_state  == 7){
    render.drawOsc(morph_static,timbre_static,nwaves,step_mode);
  }
  if(menu_state  == 8){
    render.drawMod(currentSlot, source[currentSlot], modulation_amount[currentSlot], destination[currentSlot]);
  }
  if(menu_state  == 9){
    render.drawShaper(shaper_gain);//draws the soft clip/ shaper section
  }
  

}
void setLfoType(int LFO, int type){
  switch(type){
    case 0:
      lfo1.shape(LFO_WAVEFORM_SAWTOOTH);
      break;
    case 1:
      lfo1.shape(LFO_WAVEFORM_REVERSE_SAWTOOTH);
      break;
    case 2:
      lfo1.shape(LFO_WAVEFORM_TRIANGLE);
      break;
    case 3:
      lfo1.shape(LFO_WAVEFORM_SQUARE);
      break;
    case 4:
      lfo1.shape(LFO_WAVEFORM_SINE);
      break;
    case 5:
      lfo1.shape(LFO_WAVEFORM_SAMPLE_HOLD);
      break;
    case 6:
      lfo1.shape(LFO_WAVEFORM_PULSE);
      break;
    case 7:
      lfo1.shape(LFO_WAVEFORM_VARIABLE_TRIANGLE);
      break;
  }
}
void alg1(){
  if(timbre_static<0.005)(timbre_static=0);
  for(int i = 0; i < 8; i++) {
      if(step_mode == true)(morph[i] = quantizeSignal(morph[i]));
      float localMorph = morph[i] * 4; // Scale morph range to [0, 4] for easier calculation.

      // Determine which segment we are in and set waveforms and gains accordingly
      if(localMorph < 1) { // Morph from 0 to 0.25
          if(alg1ModeA[i] != 1) {
              Osc1_alg1_waveformA[i]->begin(WAVEFORM_TRIANGLE);
              Osc1_alg1_waveformC[i]->begin(WAVEFORM_TRIANGLE);
              alg1ModeA[i] = 1;
          }
          if(alg1ModeB[i] != 0) {
              Osc1_alg1_waveformB[i]->begin(WAVEFORM_SINE);
              Osc1_alg1_waveformD[i]->begin(WAVEFORM_SINE);
              alg1ModeB[i] = 0;
          }
          Osc1_alg1_mix[i]->gain(1, 1 - localMorph);
          Osc1_alg1_mix[i]->gain(0, localMorph);
          Osc1_alg1_mix[i]->gain(3, 1 - localMorph);
          Osc1_alg1_mix[i]->gain(2, localMorph);
      } else if(localMorph < 2) { // Morph from 0.25 to 0.5
          if(alg1ModeA[i] != 1) {
              Osc1_alg1_waveformA[i]->begin(WAVEFORM_TRIANGLE);
              Osc1_alg1_waveformC[i]->begin(WAVEFORM_TRIANGLE);
              alg1ModeA[i] = 1;
          }
          if(alg1ModeB[i] != 2) {
              Osc1_alg1_waveformB[i]->begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
              Osc1_alg1_waveformD[i]->begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
              alg1ModeB[i] = 2;
          }
          localMorph -= 1; // Adjust range to [0, 1]
          Osc1_alg1_mix[i]->gain(0, 1 - localMorph);
          Osc1_alg1_mix[i]->gain(1, localMorph);
          Osc1_alg1_mix[i]->gain(2, 1 - localMorph);
          Osc1_alg1_mix[i]->gain(3, localMorph);
      } else if(localMorph < 3) { // Morph from 0.5 to 0.75
          if(alg1ModeA[i] != 3) {
              Osc1_alg1_waveformA[i]->begin(WAVEFORM_BANDLIMIT_PULSE);
              Osc1_alg1_waveformC[i]->begin(WAVEFORM_BANDLIMIT_PULSE);
              alg1ModeA[i] = 3;
              Osc1_alg1_waveformA[i]->pulseWidth(0.5);
              Osc1_alg1_waveformC[i]->pulseWidth(0.5);
          }
          if(alg1ModeB[i] != 2) {
              Osc1_alg1_waveformB[i]->begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
              Osc1_alg1_waveformD[i]->begin(WAVEFORM_BANDLIMIT_SAWTOOTH);
              alg1ModeB[i] = 2;
          }
          localMorph -= 2; // Adjust range to [0, 1]
          Osc1_alg1_mix[i]->gain(0, localMorph);
          Osc1_alg1_mix[i]->gain(1, 1 - localMorph);
          Osc1_alg1_mix[i]->gain(2, localMorph);
          Osc1_alg1_mix[i]->gain(3, 1 - localMorph);
      } else if(localMorph <= 4) { // Final phase from 0.75 to 1.0
          if(alg1ModeA[i] != 3) {
              Osc1_alg1_waveformA[i]->begin(WAVEFORM_BANDLIMIT_PULSE);
              Osc1_alg1_waveformC[i]->begin(WAVEFORM_BANDLIMIT_PULSE);
              alg1ModeA[i] = 3;
          }
          localMorph -= 3; // Adjust range to [0, 1] for pulse width adjustment
          Osc1_alg1_mix[i]->gain(0, 1);
          Osc1_alg1_mix[i]->gain(1, 0);
          Osc1_alg1_mix[i]->gain(2, 1);
          Osc1_alg1_mix[i]->gain(3, 0);
          Osc1_alg1_waveformA[i]->pulseWidth(localMorph * 0.49 + 0.5);
          Osc1_alg1_waveformC[i]->pulseWidth(localMorph * 0.49 + 0.5);
      }
  }
}
float generateFrequency(byte osc, float mod, byte voice){
  float x;
  switch(osc){
    case 1:
    //oscillator 1
    x = osc1_noteFreq[voice] * pow(2,osc1_oct) * pow(2,(osc1_semi / 12)) * pow(2,osc1_cent / 1200) * pow(2,mod/20);
    return(x);
  }
}
void updateVoices()
{
  for (byte i = 0; i < 8; i++) {
    if(amp.isActive(i)){
      status[i] = 2;
      if(amp.isRelease(i) == true)
      {
        status[i] = 1;
      }
    }
    else{
      status[i] = 0;
    }
  }
}
void filterModulation(byte type, float val, byte voice)
{
  float x = val;
  switch(type)
  {
    case 0:
    //filter 1 freq mod
      x = f_centre * pow(2, (8 * x));
      if(Filter1_mode == 3){
        x = constrain(x,0,20000);
        filter.frequency(voice,0,x);
        //Ladder[voice] -> frequency(x); 
      }
      else{
        x = constrain(x,0,13000);
        filter.frequency(voice,0,x);
      }
      break;
    case 1:
    //filter 1 resonance mod
      if(Filter1_mode == 3){
        x += Filter1_resonance;
        x = constrain(x, 0, 1);
        filter.resonance(voice,0,x);
      }
      else{
        x += Filter1_resonance;
        x = x * 5;
        x = constrain(x,0,1);
        filter.resonance(voice,0,x);
      }
      break;
    case 2:
    //filter 2 freq mod
      x = f_centre2 * pow(2, (8 * x));
      x = constrain(x,0,13000);
      filter.frequency(voice,1,x);
      break;
    case 3:
    //filter 2 resonance mod
      x += Filter2_resonance;
      x = x * 5;
      x = constrain(x,0,1);
      filter.resonance(voice,1,x);
      break;
    case 4:
    //parallel filter mix
      x = parallel_filterMix + x;
      x = constrain(x,0,1);
      if(filterRouting == 2)
      {
        filter.mix(voice,x);
      }
      
  }
}
void LFOModulation(byte lfo, float val, byte voice, byte type)
{
  //Sets the frequency of LFOs
  float x;
  //type 0 = freq mod
  switch(lfo){
    case 0:
      //LFO 1
      x = val + LFO1_staticFreq;
      x = constrain(x,0,1);
      x = 20 * pow(x,3.322);
      lfo1.frequency(voice,x);
      break;
    case 1:
      //LFO 2
      x = val + LFO2_staticFreq;
      x = constrain(x,0,1);
      x = 20 * pow(x,3.322);
      lfo2.frequency(voice,x);
      break;
    case 2:
      //LFO 3
      x = val + LFO3_staticFreq;
      x = constrain(x,0,1);
      x = 20 * pow(x,3.322);
      lfo3.frequency(voice,x);
      break;
  }
}
float getModulation(byte src, byte voice){
  //get the modulation data from a source on a per voice basis
  //call for each voice to get an array of all the modulation amounts from the source
  switch(src)
  {
    case 0:
    //no modulation
      return(0);
      break;
    case 1:
    //LFO 1 +/-
      return((lfo1.read(voice)));
      break;
    case 2:
    //LFO 1 as source (+)
    //range 0 to 1
      return((lfo1.read(voice)+1)*0.5);
      break;
    case 3:
    //LFO 1 as source (-)
    //range -1 to 0
      return((lfo1.read(voice)-1)*0.5);
      break;
    
    case 4:
    //LFO 2 +/-
      return(lfo2.read(voice));
      break;
    case 5:
    //LFO 2 as source (+)
    //range 0 to 1
      return((lfo2.read(voice)+1)*0.5);
      break;
    case 6:
    //LFO 2 as source (-)
    //range -1 to 0
      return((lfo2.read(voice)-1)*0.5);
      break;
    case 7:
    //LFO 3 +/-
      return(lfo3.read(voice));
      break;
    case 8:
    //LFO 3 as source (+)
    //range 0 to 1
      return((lfo3.read(voice)+1)*0.5);
      break;
    case 9:
    //LFO 3 as source (-)
    //range -1 to 0
      return((lfo3.read(voice)-1)*0.5);
      break;
    case 10:
    //AMP envelope as source
      return(amp.read(voice));
      break;
    case 11:
    //mod envelope 1 as source
      return(Envelope1.read(voice));
      break;
    case 12:
    //mod envelope 2 as source
      return(Envelope2.read(voice));
      break;
    case 13:
    //mod envelope 2 as source
      return(Envelope3.read(voice));
      break;
  }
}
void addToBuffer(byte dest, byte voice, float amount){
  //call for all voices with their respective amounts to get total modulation from specific src to destination
  //MUST BE RESET EVERY TIME MOD MATRIX IS GENERATED
  destinationBuffer[dest][voice] += amount;
}
void sendModulation()
{
  for(int i=0; i<8; i++){
    float freq1;
    float freq2;
    //for algorithm 1 detune

    //constrain all levels to be in -1 to 1 signal range for this voice
    float levels[128];
    for(int j=0; j<128; j++){
      levels[j] = constrain(destinationBuffer[j][i],-1,1);
    }
    
    //NO MODULATION = DESTINATION 0
    //amplifier modulation DESINATION 1
    levels[1] = 0.5 + (levels[1] * 0.5);
    amp.setLevel(i,levels[1]);
    //second value indicates to linearly interpolate for 3ms to the value to prevent distortion
    //Filter 1 cut modulation DESINATION 2
    filterModulation(0,levels[2],i);
    //filter 1 resonance DESINATION 3
    filterModulation(1,levels[3],i);
    //LFO 1 Frequency DESTINATION 4
    LFOModulation(0,levels[4],i,0);
    //LFO 2 Frequency DESTINATION 5
    LFOModulation(1,levels[5],i,0);
    //LFO 3 Frequency DESTINATION 6
    LFOModulation(2,levels[6],i,0);
    //Filter 2 cut modulation DESINATION 7
    filterModulation(2,levels[7],i);
    //filter 2 resonance DESINATION 8
    filterModulation(3,levels[8],i);
    //parallel filter mix DESTINATION 9
    filterModulation(4,levels[9],i);

    //frequency modulation oscillator 1 DESTINATION 10
    AudioNoInterrupts();
    freq1 = generateFrequency(1,levels[10],i);
    freq2 = freq1;
    freq1 = freq1 * pow(2,(timbre[i] * 0.1));
    freq2 = freq2 * pow(2,(timbre[i] * -0.1));
    Osc1_alg1_waveformA[i] -> frequency(freq1);
    Osc1_alg1_waveformB[i] -> frequency(freq1);
    Osc1_alg1_waveformC[i] -> frequency(freq2);
    Osc1_alg1_waveformD[i] -> frequency(freq2);
    AudioInterrupts();
    //set algorithm 1 frequencies

    //morph DESTINATION 11
    morph[i] = constrain((morph_static + levels[11]),0,1);

    //timbre DESTINATION 11
    timbre[i] = constrain((timbre_static + levels[12]),0,1);

  }
}
void resetBuffer()
{
  //zeros all modulation data
  for(int i=0; i<128; i++)
  {
    for(int j=0; j<8; j++)
    {
      destinationBuffer[i][j] = 0;
    }
  }
}
void generateModulation()
{
  //float scaled_modData[8];
  resetBuffer();
  for(int j=0; j<32; j++)
  {
    //go through all slots
    for(int i=0; i<8; i++){
      addToBuffer(destination[j],i, getModulation(source[j],i) * modulation_amount[j]);
    }
  }
  sendModulation();
  //got modulation data for voice and src now add to buffer
}
void playNote(byte voice, byte note, byte velocity)
{
  //function handles triggering envelopes, assigning frequencies
  if(LFO1_reset)
  {
    lfo1.sync(voice);
  }
  if(LFO2_reset)
  {
    lfo2.sync(voice);
  }
  if(LFO3_reset)
  {
    lfo3.sync(voice);
  }
  AudioNoInterrupts();
  Osc1_alg1_waveformA[voice] -> frequency(noteFreqs[note]);
  Osc1_alg1_waveformB[voice] -> frequency(noteFreqs[note]);
  Osc1_alg1_waveformC[voice] -> frequency(noteFreqs[note]);
  Osc1_alg1_waveformD[voice] -> frequency(noteFreqs[note]);
  AudioInterrupts();
  //these must remain in sync
  osc1_noteFreq[voice] = noteFreqs[note];
  amp.noteOn(voice);
  Envelope1.noteOn(voice);
  Envelope2.noteOn(voice);
  Envelope3.noteOn(voice);
  voiceNotes[voice] = note;
  //Amp[voice] -> gain(float(velocity)/127);
  
}
void myNoteOn(byte channel, byte note, byte velocity){
  //check for empty voices
  updateVoices();
  Serial.print(AudioProcessorUsageMax());
  Serial.print(AudioProcessorUsage());
  Serial.println(' ');
  for(byte i=0; i<8; i++){
    if(status[i]==0){
      playNote(i,note,velocity);
      return;
    }
  }
  //check for non sustained voices
  for(byte i=0; i<8; i++){
    if(status[i]==1){
      playNote(i,note,velocity);
      return;
    }
  }
  //check for sustained voices
  for(byte i=0; i<8; i++){
    if(status[i]==2){
      playNote(i,note,velocity);
      return;
    }
  }
  
}
void myNoteOff(byte channel, byte note, byte velocity){  
  for (byte i = 0; i < 8; i++) {
    if(voiceNotes[i] == note)
    {
      amp.noteOff(i);
      Envelope1.noteOff(i);
      Envelope2.noteOff(i);
      Envelope3.noteOff(i);
      voiceNotes[i] = 128;
      //there is no note 128 in midi, therefore this voice wont get removed instead of another voice playing this note
      return;
    }
  }
}
float midiFilterFreq(byte value)
{
  float x = float(value) / 127;
  float f_min = 20;
  float f_max = 20000;
  return(f_min * pow((f_max/f_min),x));
}
void myControlChange(byte channel, byte control, byte value){
  float x;
  switch(control){
    case 57: 
      Filter1_resonance = float(value)/127;
      break;
    case 58:
      f_centre = midiFilterFreq(value);
      break;
    case 59:
      Filter1_mode = value;
      filter.mode(0,value);
    case 60:
      //amp envelope attack
      for(byte i=0; i<8; i++){
        amp.attack(i,float(value)*10);
      }
      break;
    case 61:
      //amp envelope decay
      for(byte i=0; i<8; i++){
        amp.decay(i,float(value)*10);
      }
      break;
    case 62:
      //amp envelope sustain
      for(int i=0;i<8;i++){
      amp.sustain(i,float(value)/127);
      }
      break;
    case 63:
      //amp envelope release
      for(byte i=0; i<8; i++){
        amp.release(i,value * 10);
      }
      break;
    
    case 64:
      //LFO frequency adjust
      LFO1_staticFreq = float(value)/127;
      break;
    
    case 65:
    //LFO waveform
      AudioNoInterrupts();
      switch(value)
      {
        case 0:
        //sawtooth
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH);
          }
          break;
        case 1:
        //reverse sawtooth
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_REVERSE_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH_REVERSE);
          }
          break;
        case 2:
        //triangle
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE);
          }
          break;
        case 3:
        //square
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_SQUARE);
            //LFO[i] -> begin(WAVEFORM_SQUARE);
          }
          break;
        case 4:
        //sine
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_SINE);
            //LFO[i] -> begin(WAVEFORM_SINE);
          }
          break;
        case 5:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_SAMPLE_HOLD);
            //LFO[i] -> begin(WAVEFORM_SAMPLE_HOLD);
          }
          break;
        case 6:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_PULSE);
            //LFO[i] -> begin(WAVEFORM_PULSE);
          }
          break;
        case 7:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo1.shape(LFO_WAVEFORM_VARIABLE_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE_VARIABLE);
          }
          break;
      }
      AudioInterrupts();
      break;
    case 66:
      //LFO shape (pulse width, var triangle)
      AudioNoInterrupts();
      for(byte i=0; i<8; i++){
        lfo1.pulseWidth(float(value)/127);
      }
      AudioInterrupts();
      break;
    case 67:
      //LFO sync switch
      switch(value)
      {
        case 0:
          //sync off
          LFO1_reset = false;
          break;
        case 1:
          //sync on
          LFO1_reset = true;
          break;
      }
      //syncs to make sure in phase
      AudioNoInterrupts();
      for(byte i=0; i<8; i++){
        lfo1.sync(i);
      }
      AudioInterrupts();
      break;
    case 68:
      //LFO 2 frequency adjust
      LFO2_staticFreq = float(value)/127;
      break;
    
    case 69:
      //LFO waveform
      AudioNoInterrupts();
      switch(value)
      {
        case 0:
        //sawtooth
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH);
          }
          break;
        case 1:
        //reverse sawtooth
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_REVERSE_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH_REVERSE);
          }
          break;
        case 2:
        //triangle
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE);
          }
          break;
        case 3:
        //square
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_SQUARE);
            //LFO[i] -> begin(WAVEFORM_SQUARE);
          }
          break;
        case 4:
        //sine
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_SINE);
            //LFO[i] -> begin(WAVEFORM_SINE);
          }
          break;
        case 5:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_SAMPLE_HOLD);
            //LFO[i] -> begin(WAVEFORM_SAMPLE_HOLD);
          }
          break;
        case 6:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_PULSE);
            //LFO[i] -> begin(WAVEFORM_PULSE);
          }
          break;
        case 7:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo2.shape(LFO_WAVEFORM_VARIABLE_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE_VARIABLE);
          }
          break;
      }
      AudioInterrupts();
      break;
    case 70:
      //LFO shape (pulse width, var triangle)
      AudioNoInterrupts();
      for(byte i=0; i<8; i++){
        lfo2.pulseWidth(float(value)/127);
      }
      AudioInterrupts();
      break;
    case 71:
      //LFO sync switch
      switch(value)
      {
        case 0:
          //sync off
          LFO2_reset = false;
          break;
        case 1:
          //sync on
          LFO2_reset = true;
          break;
      }
      //syncs to make sure in phase
      AudioNoInterrupts();
      for(byte i=0; i<8; i++){
        lfo2.sync(i);
      }
      AudioInterrupts();
      break;
    case 72:
      //LFO frequency adjust
      LFO3_staticFreq = float(value)/127;
      break;
    
    case 73:
    //LFO 3 waveform
      AudioNoInterrupts();
      switch(value)
      {
        case 0:
        //sawtooth
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH);
          }
          break;
        case 1:
        //reverse sawtooth
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_REVERSE_SAWTOOTH);
            //LFO[i] -> begin(WAVEFORM_SAWTOOTH_REVERSE);
          }
          break;
        case 2:
        //triangle
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE);
          }
          break;
        case 3:
        //square
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_SQUARE);
            //LFO[i] -> begin(WAVEFORM_SQUARE);
          }
          break;
        case 4:
        //sine
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_SINE);
            //LFO[i] -> begin(WAVEFORM_SINE);
          }
          break;
        case 5:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_SAMPLE_HOLD);
            //LFO[i] -> begin(WAVEFORM_SAMPLE_HOLD);
          }
          break;
        case 6:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_PULSE);
            //LFO[i] -> begin(WAVEFORM_PULSE);
          }
          break;
        case 7:
        //sampleandhold
          for(byte i=0; i<8; i++){
            lfo3.shape(LFO_WAVEFORM_VARIABLE_TRIANGLE);
            //LFO[i] -> begin(WAVEFORM_TRIANGLE_VARIABLE);
          }
          break;
      }
      AudioInterrupts();
      break;
    case 74:
      //LFO 3 shape (pulse width, var triangle)
      AudioNoInterrupts();
      for(byte i=0; i<8; i++){
        lfo3.pulseWidth(float(value)/127);
      }
      AudioInterrupts();
      break;
    case 75:
      //LFO sync switch
      switch(value)
      {
        case 0:
          //sync off
          LFO3_reset = false;
          break;
        case 1:
          //sync on
          LFO3_reset = true;
          break;
      }
    case 76:
    //mod eg 1 attack
      for(byte i=0; i<8; i++){
        Envelope1.attack(i,float(value)*10);
      }
      break;
    case 77:
    //mod eg 1 decay
      for(byte i=0; i<8; i++){
        Envelope1.decay(i,float(value)*10);
      }
      break;
    case 78:
    //mod eg 1 sustain
      for(byte i=0; i<8; i++){
        Envelope1.sustain(i,float(value)/127);
      }
      break;
    case 79:
    //mod eg 1 release
      for(byte i=0; i<8; i++){
        Envelope1.release(i,float(value)*10);
      }
      break;
    case 80:
    //mod eg 2 attack
      for(byte i=0; i<8; i++){
        Envelope2.attack(i,float(value)*10);
      }
      break;
    case 81:
    //mod eg 2 decay
      for(byte i=0; i<8; i++){
        Envelope2.decay(i,float(value)*10);
      }
      break;
    case 82:
    //mod eg 2 sustain
      for(byte i=0; i<8; i++){
        Envelope2.sustain(i,float(value)/127);
      }
      break;
    case 83:
    //mod eg 2 release
      for(byte i=0; i<8; i++){
        Envelope2.release(i,float(value)*10);
      }
      break;
    
    case 84:
    //filter 2 resonance
      Filter2_resonance = float(value)/127;
      break;
    case 85:
    //filter 2 frequency
      f_centre2 = midiFilterFreq(value);
      break;
    case 86:
    //filter 2 mode switch
      filter.mode(1,value);
      break;
    case 87:
      //series parallel switch
      filterRouting = value;
      filter.route(value);
      for(byte i=0; i<8; i++)
      {
        switch(value)
        {
          case 0:
            //filter 1->2
            filter.mix(i,0);
            break;
          case 1:
            //filter 2->1
            filter.mix(i,1);
            break;
          case 2:
            //parallel
            filter.mix(i,0.5);
            break;
        }
      }
      break;
    case 88:
      //parallel filter mix
      parallel_filterMix = float(value)/127;
      break;
    
    case 89:
      //ladder 1 passband gain
      PassbandGain = float(value)/127;
      filter.passbandGain(PassbandGain);
      break;
    case 90:
      //filter 1 input drive
      InputDrive1 = float(value)/127;
      filter.inputDrive(InputDrive1, 0);
      break;
    case 100:
      //modulation source
      source[currentSlot] = value;
      break;
    case 101:
      //modulation destination
      destination[currentSlot] = value;
      break;
    case 102:
      //modulation amount
      modulation_amount[currentSlot] = float(value)/127;
      break;
    case 103:
      currentSlot = constrain(value,0,32);
      break;
    case 104:
      //morph
      morph_static = float(value)/127;
      break;
    case 105:
      //sync
      if(value == 0){
        for(int i=0; i<8; i++){
          softclip[i] -> enable(false);
        }
      }
      if(value == 1){
        for(int i=0; i<8; i++){
          softclip[i] -> enable(true);
        }
      }
      break;
    case 106:
    //mod eg 3 attack
      for(byte i=0; i<8; i++){
        Envelope3.attack(i,float(value)*10);
      }
      break;
    case 107:
    //mod eg 3 decay
      for(byte i=0; i<8; i++){
        Envelope3.decay(i,float(value)*10);
      }
      break;
    case 108:
    //mod eg 3 sustain
      for(byte i=0; i<8; i++){
        Envelope3.sustain(i,float(value)/127);
      }
      break;
    case 109:
    //mod eg 3 release
      for(byte i=0; i<8; i++){
        Envelope3.release(i,float(value)*10);
      }
      break;
    case 110:
      //filter 1 input drive
      InputDrive2 = float(value)/127;
      filter.inputDrive(InputDrive2, 1);
      break;
    case 111:
      //step mode (algorithm 1)
      switch(value){
        case 0:
          step_mode = false;
          break;
        case 1:
          step_mode = true;
          break;
      }
      break;
    
    case 112:
      //screen switch
      menu_state = value;
      break;
      
  }
}